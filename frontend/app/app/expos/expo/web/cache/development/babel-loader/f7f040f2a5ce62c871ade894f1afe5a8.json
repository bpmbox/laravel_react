{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/app/examples/8-stopwatch/Control.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\n\nfunction Control(_ref) {\n  var isRunning = _ref.isRunning,\n      handleLeftButtonPress = _ref.handleLeftButtonPress,\n      handleRightButtonPress = _ref.handleRightButtonPress;\n  return React.createElement(React.Fragment, null, React.createElement(TouchableOpacity, {\n    style: [styles.controlButtonBorder, {\n      backgroundColor: isRunning ? \"#333333\" : \"#1c1c1e\"\n    }],\n    onPress: handleLeftButtonPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.controlButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: isRunning ? \"#fff\" : \"#9d9ca2\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }\n  }, isRunning ? \"Step\" : \"Reset\"))), React.createElement(TouchableOpacity, {\n    style: [styles.controlButtonBorder, {\n      backgroundColor: isRunning ? \"#340e0d\" : \"#0a2a12\"\n    }],\n    onPress: handleRightButtonPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.controlButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: isRunning ? \"#ea4c49\" : \"#37d05c\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, isRunning ? \"Stop\" : \"Start\"))));\n}\n\nvar CENTER = {\n  justifyContent: \"center\",\n  alignItems: \"center\"\n};\nvar styles = StyleSheet.create({\n  controlButtonBorder: _objectSpread(_objectSpread({}, CENTER), {}, {\n    width: 70,\n    height: 70,\n    borderRadius: 70\n  }),\n  controlButton: _objectSpread(_objectSpread({}, CENTER), {}, {\n    width: 65,\n    height: 65,\n    borderRadius: 65,\n    borderColor: \"#000\",\n    borderWidth: 1\n  })\n});\nexport default React.memo(Control);","map":{"version":3,"sources":["/app/examples/8-stopwatch/Control.js"],"names":["React","Control","isRunning","handleLeftButtonPress","handleRightButtonPress","styles","controlButtonBorder","backgroundColor","controlButton","color","CENTER","justifyContent","alignItems","StyleSheet","create","width","height","borderRadius","borderColor","borderWidth","memo"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAGA,SAASC,OAAT,OAA+E;AAAA,MAA5DC,SAA4D,QAA5DA,SAA4D;AAAA,MAAjDC,qBAAiD,QAAjDA,qBAAiD;AAAA,MAA1BC,sBAA0B,QAA1BA,sBAA0B;AAC7E,SACE,0CACE,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAE,CACLC,MAAM,CAACC,mBADF,EAEL;AAAEC,MAAAA,eAAe,EAAEL,SAAS,GAAG,SAAH,GAAe;AAA3C,KAFK,CADT;AAKE,IAAA,OAAO,EAAEC,qBALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEE,MAAM,CAACG,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAEP,SAAS,GAAG,MAAH,GAAY;AAA9B,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,SAAS,GAAG,MAAH,GAAY,OADxB,CADF,CAPF,CADF,EAeE,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAE,CACLG,MAAM,CAACC,mBADF,EAEL;AAAEC,MAAAA,eAAe,EAAEL,SAAS,GAAG,SAAH,GAAe;AAA3C,KAFK,CADT;AAKE,IAAA,OAAO,EAAEE,sBALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACG,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAEP,SAAS,GAAG,SAAH,GAAe;AAAjC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,SAAS,GAAG,MAAH,GAAY,OADxB,CADF,CAPF,CAfF,CADF;AA+BD;;AAED,IAAMQ,MAAM,GAAG;AACbC,EAAAA,cAAc,EAAE,QADH;AAEbC,EAAAA,UAAU,EAAE;AAFC,CAAf;AAKA,IAAMP,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,mBAAmB,kCACdI,MADc;AAEjBK,IAAAA,KAAK,EAAE,EAFU;AAGjBC,IAAAA,MAAM,EAAE,EAHS;AAIjBC,IAAAA,YAAY,EAAE;AAJG,IADY;AAO/BT,EAAAA,aAAa,kCACRE,MADQ;AAEXK,IAAAA,KAAK,EAAE,EAFI;AAGXC,IAAAA,MAAM,EAAE,EAHG;AAIXC,IAAAA,YAAY,EAAE,EAJH;AAKXC,IAAAA,WAAW,EAAE,MALF;AAMXC,IAAAA,WAAW,EAAE;AANF;AAPkB,CAAlB,CAAf;AAiBA,eAAenB,KAAK,CAACoB,IAAN,CAAWnB,OAAX,CAAf","sourcesContent":["import React from \"react\";\nimport { StyleSheet, Text, View, TouchableOpacity } from \"react-native\";\n\nfunction Control({ isRunning, handleLeftButtonPress, handleRightButtonPress }) {\n  return (\n    <>\n      <TouchableOpacity\n        style={[\n          styles.controlButtonBorder,\n          { backgroundColor: isRunning ? \"#333333\" : \"#1c1c1e\" },\n        ]}\n        onPress={handleLeftButtonPress}\n      >\n        <View style={styles.controlButton}>\n          <Text style={{ color: isRunning ? \"#fff\" : \"#9d9ca2\" }}>\n            {isRunning ? \"Step\" : \"Reset\"}\n          </Text>\n        </View>\n      </TouchableOpacity>\n\n      <TouchableOpacity\n        style={[\n          styles.controlButtonBorder,\n          { backgroundColor: isRunning ? \"#340e0d\" : \"#0a2a12\" },\n        ]}\n        onPress={handleRightButtonPress}\n      >\n        <View style={styles.controlButton}>\n          <Text style={{ color: isRunning ? \"#ea4c49\" : \"#37d05c\" }}>\n            {isRunning ? \"Stop\" : \"Start\"}\n          </Text>\n        </View>\n      </TouchableOpacity>\n    </>\n  );\n}\n\nconst CENTER = {\n  justifyContent: \"center\",\n  alignItems: \"center\",\n};\n\nconst styles = StyleSheet.create({\n  controlButtonBorder: {\n    ...CENTER,\n    width: 70,\n    height: 70,\n    borderRadius: 70,\n  },\n  controlButton: {\n    ...CENTER,\n    width: 65,\n    height: 65,\n    borderRadius: 65,\n    borderColor: \"#000\",\n    borderWidth: 1,\n  },\n});\n\nexport default React.memo(Control);\n"]},"metadata":{},"sourceType":"module"}