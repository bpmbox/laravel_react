{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/app/examples/7-scan-qr-code/ScanQrCode.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nimport Constants from \"expo-constants\";\nimport ScannerView from \"./ScannerView\";\nexport default function ScanQrCode() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      scanned = _useState2[0],\n      setScanned = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hasPermission = _useState4[0],\n      setHasPermission = _useState4[1];\n\n  var startScan = function startScan() {\n    setScanned(false);\n\n    if (!hasPermission) {\n      (function _callee() {\n        var _await$BarCodeScanner, status;\n\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n              case 2:\n                _await$BarCodeScanner = _context.sent;\n                status = _await$BarCodeScanner.status;\n                setHasPermission(status === \"granted\");\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })();\n    }\n  };\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var data = _ref.data;\n    setScanned(true);\n    alert(\"Scanned QR code with data: \\\"\" + data + \"\\\"\");\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, !scanned && hasPermission && React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, React.createElement(BarCodeScanner, {\n    style: StyleSheet.absoluteFillObject,\n    onBarCodeScanned: handleBarCodeScanned,\n    barCodeTypes: [BarCodeScanner.Constants.BarCodeType.qr],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }), React.createElement(View, {\n    style: styles.helpTextWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.helpText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"Find QR Code to scan\"))), React.createElement(View, {\n    style: styles.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, scanned !== null && hasPermission === null && React.createElement(Text, {\n    style: styles.helpText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, \"Requesting for camera permission\"), scanned !== null && hasPermission === false && React.createElement(Text, {\n    style: styles.helpText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"No access to camera\"), scanned === false && hasPermission && React.createElement(ScannerView, {\n    scanned: scanned,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }), scanned !== false && React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: startScan,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, scanned === null ? \"Scan now\" : \"Scan again\"))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: \"#000\"\n  },\n  content: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }),\n  helpTextWrapper: {\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    padding: 15,\n    alignItems: \"center\",\n    backgroundColor: \"rgba(0,0,0,0.6)\"\n  },\n  helpText: {\n    color: \"#fff\"\n  },\n  button: {\n    paddingVertical: 15,\n    paddingHorizontal: 30,\n    borderRadius: 10,\n    backgroundColor: \"#303940\"\n  },\n  buttonText: {\n    color: \"#fff\"\n  }\n});","map":{"version":3,"sources":["/app/examples/7-scan-qr-code/ScanQrCode.js"],"names":["React","useState","BarCodeScanner","Constants","ScannerView","ScanQrCode","scanned","setScanned","hasPermission","setHasPermission","startScan","requestPermissionsAsync","status","handleBarCodeScanned","data","alert","styles","container","flex","StyleSheet","absoluteFillObject","BarCodeType","qr","helpTextWrapper","helpText","content","button","buttonText","create","paddingTop","statusBarHeight","backgroundColor","justifyContent","alignItems","position","bottom","left","right","padding","color","paddingVertical","paddingHorizontal","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  SafeAreaView,\n  View,\n  Text,\n  TouchableOpacity,\n} from \"react-native\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nimport Constants from \"expo-constants\";\nimport ScannerView from \"./ScannerView\";\n\nexport default function ScanQrCode() {\n  const [scanned, setScanned] = useState(null);\n  const [hasPermission, setHasPermission] = useState(null);\n  \n  const startScan = () => {\n    setScanned(false);\n\n    // Request camera permission\n    if (!hasPermission) {\n      (async () => {\n        const { status } = await BarCodeScanner.requestPermissionsAsync();\n        setHasPermission(status === \"granted\");\n      })();\n    }\n  };\n\n  const handleBarCodeScanned = ({ data }) => {\n    setScanned(true);\n    alert(`Scanned QR code with data: \"${data}\"`);\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {!scanned && hasPermission && (\n        <View style={{ flex: 1 }}>\n          {/* https://docs.expo.io/versions/latest/sdk/bar-code-scanner/ */}\n          <BarCodeScanner\n            style={StyleSheet.absoluteFillObject}\n            onBarCodeScanned={handleBarCodeScanned}\n            barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}\n          />\n\n          <View style={styles.helpTextWrapper}>\n            <Text style={styles.helpText}>Find QR Code to scan</Text>\n          </View>\n        </View>\n      )}\n\n      <View style={styles.content}>\n        {scanned !== null && hasPermission === null && (\n          <Text style={styles.helpText}>Requesting for camera permission</Text>\n        )}\n\n        {scanned !== null && hasPermission === false && (\n          <Text style={styles.helpText}>No access to camera</Text>\n        )}\n\n        {scanned === false && hasPermission && (\n          <ScannerView scanned={scanned} />\n        )}\n\n        {(scanned !== false) && (\n          <TouchableOpacity style={styles.button} onPress={startScan}>\n            <Text style={styles.buttonText}>\n              {scanned === null ? \"Scan now\" : \"Scan again\"}\n            </Text>\n          </TouchableOpacity>\n        )}\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: \"#000\",\n  },\n  content: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  helpTextWrapper: {\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    padding: 15,\n    alignItems: \"center\",\n    backgroundColor: \"rgba(0,0,0,0.6)\",\n  },\n  helpText: {\n    color: \"#fff\",\n  },\n  button: {\n    paddingVertical: 15,\n    paddingHorizontal: 30,\n    borderRadius: 10,\n    backgroundColor: \"#303940\",\n  },\n  buttonText: {\n    color: \"#fff\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}