{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/app/examples/10-music-player/MusicPlayer.js\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Audio } from \"expo-av\";\nimport Constants from \"expo-constants\";\nimport PlayerModal from \"./PlayerModal\";\nimport { displayTime } from \"./util\";\nimport { styles } from \"./MusicPlayer.style\";\nimport { PLAY_LIST } from \"./listSong\";\nexport default function MusicPlayer() {\n  var _this = this;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isModalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      playingSong = _useState4[0],\n      setPlayingSong = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isBuffering = _useState6[0],\n      setBuffering = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isPlaying = _useState8[0],\n      setPlaying = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isRewinding = _useState10[0],\n      setRewinding = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      currentPosition = _useState12[0],\n      setcurrentPosition = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      currentSongIndex = _useState14[0],\n      setCurrentSongIndex = _useState14[1];\n\n  var _useState15 = useState(null),\n      _useState16 = _slicedToArray(_useState15, 2),\n      playbackObject = _useState16[0],\n      setPlaybackObject = _useState16[1];\n\n  var renderHeader = function renderHeader() {\n    return React.createElement(View, {\n      style: styles.header,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }\n    }, React.createElement(Text, {\n      style: styles.headerTitle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, \"List Song\"));\n  };\n\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item,\n        index = _ref.index;\n    return React.createElement(TouchableOpacity, {\n      style: styles.listItem,\n      onPress: function onPress() {\n        return playSong(item, index);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }\n    }, React.createElement(Image, {\n      source: {\n        uri: item.coverImage\n      },\n      style: styles.coverImage,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }), React.createElement(View, {\n      style: {\n        flex: 1\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.songName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, item.name), React.createElement(View, {\n      style: styles.songInfo,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: styles.singerName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }, item.singer), React.createElement(Text, {\n      style: styles.songDuration,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    }, displayTime(item.duration)))));\n  };\n\n  var keyExtractor = function keyExtractor(item) {\n    return item.sourceUri;\n  };\n\n  var playSong = function playSong(song, index) {\n    var _await$Audio$Sound$cr, sound;\n\n    return _regeneratorRuntime.async(function playSong$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setModalVisible(true);\n            setBuffering(true);\n            setPlaying(false);\n            setcurrentPosition(0);\n            setCurrentSongIndex(index);\n            setPlayingSong(song);\n            _context.prev = 6;\n\n            if (!(playbackObject !== null)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(playbackObject.unloadAsync());\n\n          case 10:\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(Audio.Sound.createAsync({\n              uri: song.sourceUri\n            }, {\n              shouldPlay: true\n            }));\n\n          case 12:\n            _await$Audio$Sound$cr = _context.sent;\n            sound = _await$Audio$Sound$cr.sound;\n            sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n            setPlaybackObject(sound);\n            _context.next = 21;\n            break;\n\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context[\"catch\"](6);\n            alert(\"Can't play this song!\");\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[6, 18]], Promise);\n  };\n\n  var onPlaybackStatusUpdate = function onPlaybackStatusUpdate(_ref2) {\n    var isLoaded = _ref2.isLoaded,\n        isBuffering = _ref2.isBuffering,\n        isPlaying = _ref2.isPlaying,\n        error = _ref2.error;\n\n    if (!isLoaded) {\n      if (error) {\n        alert(\"Encountered a fatal error during playback: \" + error);\n      }\n    } else {\n      setBuffering(isBuffering);\n      setPlaying(isPlaying);\n    }\n  };\n\n  var updatePosition = function updatePosition(position) {\n    return _regeneratorRuntime.async(function updatePosition$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(playbackObject.setPositionAsync(position));\n\n          case 2:\n            setcurrentPosition(position);\n            setRewinding(false);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var pauseOrResumeSong = function pauseOrResumeSong() {\n    return _regeneratorRuntime.async(function pauseOrResumeSong$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!isPlaying) {\n              _context3.next = 5;\n              break;\n            }\n\n            setPlaying(false);\n            playbackObject.pauseAsync();\n            _context3.next = 13;\n            break;\n\n          case 5:\n            if (!(currentPosition === playingSong.duration)) {\n              _context3.next = 11;\n              break;\n            }\n\n            setcurrentPosition(0);\n            _context3.next = 9;\n            return _regeneratorRuntime.awrap(playbackObject.replayAsync());\n\n          case 9:\n            _context3.next = 13;\n            break;\n\n          case 11:\n            _context3.next = 13;\n            return _regeneratorRuntime.awrap(playbackObject.playAsync());\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var changeSong = function changeSong(index) {\n    if (index < 0) index = PLAY_LIST.length - 1;else if (index == PLAY_LIST.length) index = 0;\n    playSong(PLAY_LIST[index], index);\n  };\n\n  var stopPlaySong = function stopPlaySong() {\n    setModalVisible(false);\n    setPlaying(false);\n    playbackObject.unloadAsync();\n  };\n\n  useEffect(function () {\n    if (isPlaying && !isBuffering) {\n      var interval = setInterval(function _callee() {\n        var _await$playbackObject, positionMillis, durationMillis;\n\n        return _regeneratorRuntime.async(function _callee$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _regeneratorRuntime.awrap(playbackObject.getStatusAsync());\n\n              case 2:\n                _await$playbackObject = _context4.sent;\n                positionMillis = _await$playbackObject.positionMillis;\n                durationMillis = _await$playbackObject.durationMillis;\n                if (!isRewinding) setcurrentPosition(positionMillis || 0);\n\n                if (!(positionMillis >= durationMillis - 900)) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                _context4.next = 9;\n                return _regeneratorRuntime.awrap(playbackObject.setPositionAsync(durationMillis));\n\n              case 9:\n                setcurrentPosition(durationMillis);\n                setPlaying(false);\n                clearInterval(interval);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }, 1000);\n      return function () {\n        return clearInterval(interval);\n      };\n    }\n  }, [isPlaying, isBuffering, isRewinding]);\n  return React.createElement(SafeAreaView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, React.createElement(FlatList, {\n    data: PLAY_LIST,\n    renderItem: renderItem,\n    ListHeaderComponent: renderHeader,\n    keyExtractor: keyExtractor,\n    showsVerticalScrollIndicator: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }), React.createElement(PlayerModal, {\n    isModalVisible: isModalVisible,\n    closeModal: stopPlaySong,\n    playingSong: playingSong,\n    isPlaying: isPlaying,\n    isBuffering: isBuffering,\n    currentSongIndex: currentSongIndex,\n    currentPosition: currentPosition,\n    setcurrentPosition: setcurrentPosition,\n    setRewinding: setRewinding,\n    updatePosition: updatePosition,\n    pauseOrResumeSong: pauseOrResumeSong,\n    changeSong: changeSong,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/app/examples/10-music-player/MusicPlayer.js"],"names":["React","useEffect","useState","Audio","Constants","PlayerModal","displayTime","styles","PLAY_LIST","MusicPlayer","isModalVisible","setModalVisible","playingSong","setPlayingSong","isBuffering","setBuffering","isPlaying","setPlaying","isRewinding","setRewinding","currentPosition","setcurrentPosition","currentSongIndex","setCurrentSongIndex","playbackObject","setPlaybackObject","renderHeader","header","headerTitle","renderItem","item","index","listItem","playSong","uri","coverImage","flex","songName","name","songInfo","singerName","singer","songDuration","duration","keyExtractor","sourceUri","song","unloadAsync","Sound","createAsync","shouldPlay","sound","setOnPlaybackStatusUpdate","onPlaybackStatusUpdate","alert","isLoaded","error","updatePosition","position","setPositionAsync","pauseOrResumeSong","pauseAsync","replayAsync","playAsync","changeSong","length","stopPlaySong","interval","setInterval","getStatusAsync","positionMillis","durationMillis","clearInterval","container"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  SafeAreaView,\n  View,\n  Text,\n  Image,\n  TouchableOpacity,\n  FlatList,\n} from \"react-native\";\nimport { Audio } from \"expo-av\";\nimport Constants from \"expo-constants\";\nimport PlayerModal from \"./PlayerModal\";\nimport { displayTime } from \"./util\";\nimport { styles } from \"./MusicPlayer.style\";\nimport { PLAY_LIST } from \"./listSong\";\n\nexport default function MusicPlayer() {\n  const [isModalVisible, setModalVisible] = useState(false);\n  const [playingSong, setPlayingSong] = useState({});\n  const [isBuffering, setBuffering] = useState(false);\n  const [isPlaying, setPlaying] = useState(false);\n  const [isRewinding, setRewinding] = useState(false);\n  const [currentPosition, setcurrentPosition] = useState(0);\n  const [currentSongIndex, setCurrentSongIndex] = useState(0);\n  const [playbackObject, setPlaybackObject] = useState(null);\n\n  const renderHeader = () => (\n    <View style={styles.header}>\n      <Text style={styles.headerTitle}>List Song</Text>\n    </View>\n  );\n\n  const renderItem = ({ item, index }) => (\n    <TouchableOpacity\n      style={styles.listItem}\n      onPress={() => playSong(item, index)}\n    >\n      <Image source={{ uri: item.coverImage }} style={styles.coverImage} />\n\n      <View style={{ flex: 1 }}>\n        <Text style={styles.songName}>{item.name}</Text>\n\n        <View style={styles.songInfo}>\n          <Text style={styles.singerName}>{item.singer}</Text>\n          <Text style={styles.songDuration}>{displayTime(item.duration)}</Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n\n  const keyExtractor = (item) => item.sourceUri;\n\n  const playSong = async (song, index) => {\n    setModalVisible(true);\n    setBuffering(true);\n    setPlaying(false);\n    setcurrentPosition(0);\n    setCurrentSongIndex(index);\n    setPlayingSong(song);\n\n    try {\n      // Unload playback when change sound\n      if (playbackObject !== null) {\n        await playbackObject.unloadAsync();\n      }\n\n      // Play new sound\n      const { sound } = await Audio.Sound.createAsync(\n        { uri: song.sourceUri },\n        { shouldPlay: true }\n      );\n      sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n      setPlaybackObject(sound);\n    } catch (error) {\n      alert(\"Can't play this song!\");\n    }\n  };\n\n  const onPlaybackStatusUpdate = ({\n    isLoaded,\n    isBuffering,\n    isPlaying,\n    error,\n  }) => {\n    if (!isLoaded) {\n      if (error) {\n        alert(`Encountered a fatal error during playback: ${error}`);\n      }\n    } else {\n      setBuffering(isBuffering);\n      setPlaying(isPlaying);\n    }\n  };\n\n  const updatePosition = async (position) => {\n    await playbackObject.setPositionAsync(position);\n    setcurrentPosition(position);\n    setRewinding(false);\n  };\n\n  const pauseOrResumeSong = async () => {\n    if (isPlaying) {\n      setPlaying(false);\n      playbackObject.pauseAsync();\n    } else {\n      if (currentPosition === playingSong.duration) {\n        setcurrentPosition(0);\n        await playbackObject.replayAsync();\n      } else {\n        await playbackObject.playAsync();\n      }\n    }\n  };\n\n  const changeSong = (index) => {\n    if (index < 0) index = PLAY_LIST.length - 1;\n    else if (index == PLAY_LIST.length) index = 0;\n\n    playSong(PLAY_LIST[index], index);\n  };\n\n  const stopPlaySong = () => {\n    setModalVisible(false);\n    setPlaying(false);\n    playbackObject.unloadAsync();\n  };\n\n  // https://reactjs.org/docs/hooks-effect.html\n  useEffect(() => {\n    // Run time slider\n    if (isPlaying && !isBuffering) {\n      const interval = setInterval(async () => {\n        const {\n          positionMillis,\n          durationMillis,\n        } = await playbackObject.getStatusAsync();\n\n        // Don't update position when user rewinding\n        if (!isRewinding) setcurrentPosition(positionMillis || 0);\n\n        // Stop sound if positionMillis equals durationMillis or less than 1 second\n        if (positionMillis >= durationMillis - 900) {\n          await playbackObject.setPositionAsync(durationMillis);\n          setcurrentPosition(durationMillis);\n          setPlaying(false);\n          clearInterval(interval);\n        }\n      }, 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, isBuffering, isRewinding]);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlatList\n        data={PLAY_LIST}\n        renderItem={renderItem}\n        ListHeaderComponent={renderHeader}\n        keyExtractor={keyExtractor}\n        showsVerticalScrollIndicator={false}\n      />\n\n      <PlayerModal\n        isModalVisible={isModalVisible}\n        closeModal={stopPlaySong}\n        playingSong={playingSong}\n        isPlaying={isPlaying}\n        isBuffering={isBuffering}\n        currentSongIndex={currentSongIndex}\n        currentPosition={currentPosition}\n        setcurrentPosition={setcurrentPosition}\n        setRewinding={setRewinding}\n        updatePosition={updatePosition}\n        pauseOrResumeSong={pauseOrResumeSong}\n        changeSong={changeSong}\n      />\n    </SafeAreaView>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}