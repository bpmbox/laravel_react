{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useIMGElementState;\n\nvar _react = require(\"react\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _useImageNaturalDimensions = _interopRequireDefault(require(\"./useImageNaturalDimensions\"));\n\nvar _useImageConcreteDimensions = _interopRequireDefault(require(\"./useImageConcreteDimensions\"));\n\nvar _defaultInitialImageDimensions = _interopRequireDefault(require(\"./defaultInitialImageDimensions\"));\n\nvar _getIMGState = require(\"./getIMGState\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getImageSizeAsync(_ref) {\n  var uri = _ref.uri,\n      headers = _ref.headers;\n  return new Promise(function (onsuccess, onerror) {\n    var onImageDimensionsSuccess = function onImageDimensionsSuccess(width, height) {\n      return onsuccess({\n        width: width,\n        height: height\n      });\n    };\n\n    if (headers) {\n      _reactNative.Image.getSizeWithHeaders(uri, headers, onImageDimensionsSuccess, onerror);\n    } else {\n      _reactNative.Image.getSize(uri, onImageDimensionsSuccess, onerror);\n    }\n  });\n}\n\nfunction useFetchedNaturalDimensions(props) {\n  var source = props.source,\n      cachedNaturalDimensions = props.cachedNaturalDimensions;\n\n  var _ref2 = (0, _useImageNaturalDimensions.default)(props),\n      error = _ref2.error,\n      flatStyle = _ref2.flatStyle,\n      naturalDimensions = _ref2.naturalDimensions,\n      specifiedDimensions = _ref2.specifiedDimensions,\n      onError = _ref2.onError,\n      onNaturalDimensions = _ref2.onNaturalDimensions;\n\n  var hasCachedDimensions = !!cachedNaturalDimensions;\n  (0, _react.useEffect)(function fetchPhysicalDimensions() {\n    var cancelled = false;\n\n    if (source.uri && !hasCachedDimensions) {\n      getImageSizeAsync({\n        uri: source.uri,\n        headers: source.headers\n      }).then(function (dimensions) {\n        return !cancelled && onNaturalDimensions(dimensions);\n      }).catch(function (e) {\n        return !cancelled && onError(e || {});\n      });\n      return function () {\n        cancelled = true;\n      };\n    }\n  }, [source.uri, source.headers, onNaturalDimensions, onError, hasCachedDimensions]);\n  return {\n    specifiedDimensions: specifiedDimensions,\n    flatStyle: flatStyle,\n    naturalDimensions: naturalDimensions,\n    error: error,\n    onError: onError,\n    onNaturalDimensions: onNaturalDimensions\n  };\n}\n\nfunction useIMGElementState(props) {\n  var alt = props.alt,\n      altColor = props.altColor,\n      source = props.source,\n      contentWidth = props.contentWidth,\n      computeMaxWidth = props.computeMaxWidth,\n      objectFit = props.objectFit,\n      _props$initialDimensi = props.initialDimensions,\n      initialDimensions = _props$initialDimensi === void 0 ? _defaultInitialImageDimensions.default : _props$initialDimensi;\n\n  var _useFetchedNaturalDim = useFetchedNaturalDimensions(props),\n      naturalDimensions = _useFetchedNaturalDim.naturalDimensions,\n      specifiedDimensions = _useFetchedNaturalDim.specifiedDimensions,\n      flatStyle = _useFetchedNaturalDim.flatStyle,\n      onError = _useFetchedNaturalDim.onError,\n      error = _useFetchedNaturalDim.error;\n\n  var concreteDimensions = (0, _useImageConcreteDimensions.default)({\n    flatStyle: flatStyle,\n    naturalDimensions: naturalDimensions,\n    specifiedDimensions: specifiedDimensions,\n    computeMaxWidth: computeMaxWidth,\n    contentWidth: contentWidth\n  });\n  return (0, _getIMGState.getIMGState)({\n    error: error,\n    alt: alt,\n    altColor: altColor,\n    concreteDimensions: concreteDimensions,\n    containerStyle: flatStyle,\n    initialDimensions: initialDimensions,\n    objectFit: objectFit,\n    onError: onError,\n    source: source\n  });\n}","map":{"version":3,"sources":["useIMGElementState.ts"],"names":["headers","onImageDimensionsSuccess","onsuccess","width","height","Image","cachedNaturalDimensions","onNaturalDimensions","hasCachedDimensions","cancelled","source","getImageSizeAsync","uri","dimensions","e","onError","specifiedDimensions","flatStyle","naturalDimensions","error","initialDimensions","defaultImageInitialDimensions","useFetchedNaturalDimensions","concreteDimensions","computeMaxWidth","contentWidth","alt","altColor","containerStyle","objectFit"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport { Image } from 'react-native';\nimport type { UseIMGElementStateProps, IMGElementState } from './img-types';\nimport useImageNaturalDimensions from './useImageNaturalDimensions';\nimport useImageConcreteDimensions from './useImageConcreteDimensions';\nimport defaultImageInitialDimensions from './defaultInitialImageDimensions';\nimport { ImageDimensions } from '../shared-types';\nimport { getIMGState } from './getIMGState';\n\nfunction getImageSizeAsync({\n  uri,\n  headers\n}: {\n  uri: string;\n  headers: any;\n}): Promise<ImageDimensions> {\n  return new Promise<ImageDimensions>((onsuccess, onerror) => {\n    const onImageDimensionsSuccess = (width: number, height: number) =>\n      onsuccess({ width, height });\n    if (headers) {\n      Image.getSizeWithHeaders(uri, headers, onImageDimensionsSuccess, onerror);\n    } else {\n      Image.getSize(uri, onImageDimensionsSuccess, onerror);\n    }\n  });\n}\n\nfunction useFetchedNaturalDimensions(props: UseIMGElementStateProps) {\n  const { source, cachedNaturalDimensions } = props;\n  const {\n    error,\n    flatStyle,\n    naturalDimensions,\n    specifiedDimensions,\n    onError,\n    onNaturalDimensions\n  } = useImageNaturalDimensions(props);\n  const hasCachedDimensions = !!cachedNaturalDimensions;\n  useEffect(\n    function fetchPhysicalDimensions() {\n      let cancelled = false;\n      if (source.uri && !hasCachedDimensions) {\n        getImageSizeAsync({ uri: source.uri, headers: source.headers })\n          .then((dimensions) => !cancelled && onNaturalDimensions(dimensions))\n          .catch((e) => !cancelled && onError(e || {}));\n        return () => {\n          cancelled = true;\n        };\n      }\n    },\n    [\n      source.uri,\n      source.headers,\n      onNaturalDimensions,\n      onError,\n      hasCachedDimensions\n    ]\n  );\n  return {\n    specifiedDimensions,\n    flatStyle,\n    naturalDimensions,\n    error,\n    onError,\n    onNaturalDimensions\n  };\n}\n\n/**\n * This hook will compute concrete dimensions from image natural dimensions and\n * constraints. It will fetch the image and get its dimensions.\n *\n * @remarks If you know the dimensions beforehand, use\n * {@link useIMGElementStateWithCache} instead to save a network request and\n * prevent a layout shift.\n */\nexport default function useIMGElementState(\n  props: UseIMGElementStateProps\n): IMGElementState {\n  const {\n    alt,\n    altColor,\n    source,\n    contentWidth,\n    computeMaxWidth,\n    objectFit,\n    initialDimensions = defaultImageInitialDimensions\n  } = props;\n  const { naturalDimensions, specifiedDimensions, flatStyle, onError, error } =\n    useFetchedNaturalDimensions(props);\n  const concreteDimensions = useImageConcreteDimensions({\n    flatStyle,\n    naturalDimensions,\n    specifiedDimensions,\n    computeMaxWidth,\n    contentWidth\n  });\n  return getIMGState({\n    error,\n    alt,\n    altColor,\n    concreteDimensions,\n    containerStyle: flatStyle,\n    initialDimensions,\n    objectFit,\n    onError,\n    source\n  });\n}\n"]},"metadata":{},"sourceType":"script"}