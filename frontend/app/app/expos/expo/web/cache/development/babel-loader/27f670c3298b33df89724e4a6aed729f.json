{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/app/App.js\";\nvar _excluded = [\"TDefaultRenderer\"];\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { Alert, Text, ListItem } from \"react-native-elements\";\nimport Constants from \"expo-constants\";\nimport { EXAMPLE_LIST } from \"./example-list\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport RenderHtml, { HTMLContentModel, defaultHTMLElementModels } from 'react-native-render-html';\n\nfunction H1Renderer(_ref) {\n  var TDefaultRenderer = _ref.TDefaultRenderer,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var onPress = function onPress() {\n    return alert('pressed!');\n  };\n\n  return React.createElement(TDefaultRenderer, _extends({}, props, {\n    onPress: onPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }));\n}\n\nvar tagsStyles = {\n  article: {\n    marginHorizontal: 10\n  }\n};\nvar source2 = {\n  html: \"\\n<article>\\n  <h1>Press me!</h1>\\n  <p>\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed\\n    do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n    Ut enim ad minim veniam.\\n  </p>\\n</article>\\n\"\n};\nvar renderers = {\n  h1: H1Renderer\n};\nvar a = \"aaasaassa\";\nvar source = {\n  html: \"<p style=\\\"text-align:center\\\">\\n  <a href=\\\"https://www.google.com\\\">aaaaaa</a>s\\n  <textbox>aa</textbox>\\n  Those are inline images!<br/><br/>\\n  <input type=\\\"password\\\" name=\\\"pass\\\" size=\\\"6\\\" maxlength=\\\"4\\\">\\n  <strong>\" + a + \"before</strong>\\n  <img src=\\\"https://www.fillmurray.com/50/50\\\" width=\\\"50\\\" height=\\\"50\\\" />&nbsp;\\n  <img src=\\\"https://www.fillmurray.com/70/50\\\" width=\\\"70\\\" height=\\\"50\\\" />&nbsp;\\n  <strong>after</strong>\\n<textbox>ssssssssssssssssssssaa</textbox>\\n  <a href=\\\"https://meliorence.github.io/react-native-render-html/docs/guides/custom-renderers\\\">maji</a>\\n</p>\\n<table border=1>\\n<tr><tr>aaaaaaaaaaaaaaaaaaaaaaa</td></tr>\\nhttps://www.aizulab.com/blog/react-native-render-html/\\nhttps://snack.expo.dev/@miyataken999/001001333333333333main\\n</table>\\n\\n\"\n};\nvar customHTMLElementModels = {\n  img: defaultHTMLElementModels.img.extend({\n    contentModel: HTMLContentModel.mixed\n  })\n};\nexport default function App() {\n  var _this = this;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      exampleIndex = _useState2[0],\n      setExampleIndex = _useState2[1];\n\n  useEffect(function () {\n    var backAction = function backAction() {\n      if (exampleIndex !== null) {\n        setExampleIndex(null);\n      } else {\n        BackHandler.exitApp();\n      }\n\n      return true;\n    };\n\n    var backHandler = BackHandler.addEventListener(\"hardwareBackPress\", backAction);\n    return function () {\n      return backHandler.remove();\n    };\n  }, [exampleIndex]);\n  if (exampleIndex !== null) return EXAMPLE_LIST[exampleIndex].component;\n  return React.createElement(SafeAreaView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    h4: true,\n    style: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, \"React Native Expo Examples\"), React.createElement(RenderHtml, {\n    contentWidth: 200,\n    source: source2,\n    customHTMLElementModels: customHTMLElementModels,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, EXAMPLE_LIST.map(function (l, i) {\n    return React.createElement(ListItem, {\n      key: i,\n      bottomDivider: true,\n      onPress: function onPress() {\n        return setExampleIndex(i);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }, \"Level \", l.level)), React.createElement(ListItem.Content, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, React.createElement(ListItem.Title, {\n      style: styles.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 15\n      }\n    }, l.name)));\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: Constants.statusBarHeight\n  },\n  heading: {\n    textAlign: \"center\",\n    padding: 12\n  },\n  title: {\n    fontWeight: \"bold\"\n  }\n});","map":{"version":3,"sources":["/app/App.js"],"names":["React","useState","useEffect","Alert","Text","ListItem","Constants","EXAMPLE_LIST","RenderHtml","HTMLContentModel","defaultHTMLElementModels","H1Renderer","TDefaultRenderer","props","onPress","alert","tagsStyles","article","marginHorizontal","source2","html","renderers","h1","a","source","customHTMLElementModels","img","extend","contentModel","mixed","App","exampleIndex","setExampleIndex","backAction","BackHandler","exitApp","backHandler","addEventListener","remove","component","styles","container","heading","map","l","i","level","title","name","StyleSheet","create","flex","paddingTop","statusBarHeight","textAlign","padding","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  StyleSheet,\n  SafeAreaView,\n  ScrollView,\n  View,\n  BackHandler,\n} from \"react-native\";\nimport { Alert, Text, ListItem } from \"react-native-elements\";\nimport Constants from \"expo-constants\";\nimport { EXAMPLE_LIST } from \"./example-list\";\nimport { useWindowDimensions } from 'react-native';\nimport RenderHtml, { HTMLContentModel, defaultHTMLElementModels } from 'react-native-render-html';\n\nfunction H1Renderer({\n  TDefaultRenderer,\n  ...props\n}) {\n  const onPress = () => alert('pressed!');\n  return (\n    <TDefaultRenderer\n      {...props}\n      onPress={onPress}\n    />\n  );\n}\n\nconst tagsStyles = {\n  article: {\n    marginHorizontal: 10\n  }\n};\n\nconst source2 = {\n  html: `\n<article>\n  <h1>Press me!</h1>\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed\n    do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n    Ut enim ad minim veniam.\n  </p>\n</article>\n`\n};\n\nconst renderers = {\n  h1: H1Renderer\n};\n\nlet a = \"aaasaassa\"\nconst source = {\n  html: `<p style=\"text-align:center\">\n  <a href=\"https://www.google.com\">aaaaaa</a>s\n  <textbox>aa</textbox>\n  Those are inline images!<br/><br/>\n  <input type=\"password\" name=\"pass\" size=\"6\" maxlength=\"4\">\n  <strong>${a}before</strong>\n  <img src=\"https://www.fillmurray.com/50/50\" width=\"50\" height=\"50\" />&nbsp;\n  <img src=\"https://www.fillmurray.com/70/50\" width=\"70\" height=\"50\" />&nbsp;\n  <strong>after</strong>\n<textbox>ssssssssssssssssssssaa</textbox>\n  <a href=\"https://meliorence.github.io/react-native-render-html/docs/guides/custom-renderers\">maji</a>\n</p>\n<table border=1>\n<tr><tr>aaaaaaaaaaaaaaaaaaaaaaa</td></tr>\nhttps://www.aizulab.com/blog/react-native-render-html/\nhttps://snack.expo.dev/@miyataken999/001001333333333333main\n</table>\n\n`\n};\n\nconst customHTMLElementModels = {\n  img: defaultHTMLElementModels.img.extend({\n    contentModel: HTMLContentModel.mixed\n  })\n};\n\n//https://snack.expo.io/@narcis/custom-back-button カスタムバックボタン\nexport default function App() {\n  const [exampleIndex, setExampleIndex] = useState(null);\n\n  // Handle when user press Hardware Back Button\n  useEffect(() => {\n    const backAction = () => {\n      // Go back to Example List\n      if (exampleIndex !== null) {\n        setExampleIndex(null);\n      }\n      // Exit app if user currently in Example List\n      else {\n        BackHandler.exitApp();\n      }\n\n      return true;\n    };\n\n    // https://reactnative.dev/docs/backhandler\n    const backHandler = BackHandler.addEventListener(\n      \"hardwareBackPress\",\n      backAction\n    );\n\n    return () => backHandler.remove();\n  }, [exampleIndex]);\n\n  if (exampleIndex !== null) return EXAMPLE_LIST[exampleIndex].component;\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Text h4 style={styles.heading}>\n        React Native Expo Examples\n      </Text>\n      <RenderHtml\n        contentWidth={200}\n        source={source2}\n        customHTMLElementModels={customHTMLElementModels}\n      />\n\n      <ScrollView>\n        {EXAMPLE_LIST.map((l, i) => (\n          <ListItem key={i} bottomDivider onPress={() => setExampleIndex(i)}>\n            <View>\n              <Text>Level {l.level}</Text>\n            </View>\n\n            <ListItem.Content>\n              <ListItem.Title style={styles.title}>{l.name}</ListItem.Title>\n            </ListItem.Content>\n          </ListItem>\n        ))}\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: Constants.statusBarHeight,\n  },\n  heading: {\n    textAlign: \"center\",\n    padding: 12,\n  },\n  title: {\n    fontWeight: \"bold\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}