{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";var supportsFullscreenAPI=function supportsFullscreenAPI(element){return'requestFullscreen'in element;};var supportsWebkitFullscreenAPI=function supportsWebkitFullscreenAPI(element){return'webkitEnterFullScreen'in element;};var supportsMsFullscreenAPI=function supportsMsFullscreenAPI(element){return'msRequestFullscreen'in element;};var supportsWebkitFullscreenChangeEvent=function supportsWebkitFullscreenChangeEvent(){return supportsEvent('video','webkitfullscreenchange');};function addEventListener(element,eventName,listener){element.addEventListener(eventName,listener);return function(){return element.removeEventListener(eventName,listener);};}var supportsEvent=function supportsEvent(elementName,eventName){var element=document.createElement(elementName);element.setAttribute('on'+eventName,'return;');return typeof element['on'+eventName]==='function';};export function requestFullscreen(element){var _element$webkitEnterF,_element$msRequestFul;return _regeneratorRuntime.async(function requestFullscreen$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!supportsFullscreenAPI(element)){_context.next=4;break;}return _context.abrupt(\"return\",element.requestFullscreen());case 4:if(!supportsWebkitFullscreenAPI(element)){_context.next=8;break;}(_element$webkitEnterF=element['webkitEnterFullScreen'])==null?void 0:_element$webkitEnterF.call(element);_context.next=13;break;case 8:if(!supportsMsFullscreenAPI(element)){_context.next=12;break;}(_element$msRequestFul=element['msRequestFullscreen'])==null?void 0:_element$msRequestFul.call(element);_context.next=13;break;case 12:throw new Error('Fullscreen not supported');case 13:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function exitFullscreen(element){var _element$webkitExitFu,_document$msExitFulls,_document;return _regeneratorRuntime.async(function exitFullscreen$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!supportsFullscreenAPI(element)){_context2.next=4;break;}return _context2.abrupt(\"return\",document.exitFullscreen());case 4:if(!supportsWebkitFullscreenAPI(element)){_context2.next=8;break;}(_element$webkitExitFu=element['webkitExitFullScreen'])==null?void 0:_element$webkitExitFu.call(element);_context2.next=13;break;case 8:if(!supportsMsFullscreenAPI(element)){_context2.next=12;break;}(_document$msExitFulls=(_document=document)['msExitFullscreen'])==null?void 0:_document$msExitFulls.call(_document);_context2.next=13;break;case 12:throw new Error('Fullscreen not supported');case 13:case\"end\":return _context2.stop();}}},null,null,null,Promise);}export function addFullscreenListener(element,callback){if(supportsFullscreenAPI(element)){return addEventListener(element,'fullscreenchange',function(event){return callback(document.fullscreenElement===event.target);});}else if(supportsWebkitFullscreenAPI(element)&&supportsWebkitFullscreenChangeEvent()){return addEventListener(element,'webkitfullscreenchange',function(event){return callback(document['webkitFullscreenElement']===event.target);});}else if(supportsWebkitFullscreenAPI(element)){var removeBeginListener=addEventListener(element,'webkitbeginfullscreen',function(){return callback(true);});var removeEndListener=addEventListener(element,'webkitendfullscreen',function(){return callback(false);});return function(){removeBeginListener();removeEndListener();};}else if(supportsMsFullscreenAPI(element)){return addEventListener(document,'MSFullscreenChange',function(event){return callback(document['msFullscreenElement']===event.target);});}else{return function(){};}}","map":{"version":3,"sources":["../src/FullscreenUtils.web.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Detect if the browser supports the standard fullscreen API on the given\n * element:\n * https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\n */\nconst supportsFullscreenAPI = (element: HTMLMediaElement): boolean =>\n  'requestFullscreen' in element;\n\n/**\n * Detect if the browser supports the non-standard webkit fullscreen API on the\n * given element (looking at you, Safari).\n */\nconst supportsWebkitFullscreenAPI = (element: HTMLMediaElement): boolean =>\n  'webkitEnterFullScreen' in element;\n\n/**\n * Detect if the browser supports the non-standard ms fullscreen API on the\n * given element (looking at you, IE11).\n */\nconst supportsMsFullscreenAPI = (element: HTMLMediaElement): boolean =>\n  'msRequestFullscreen' in element;\n\n/**\n * Detect if the browser supports the `webkitFullscreenChange` event. This is\n * a non-standard event added to Safari on macOS by Apple:\n * https://developer.apple.com/documentation/webkitjs/document/1631998-onwebkitfullscreenchange\n */\nconst supportsWebkitFullscreenChangeEvent = (): boolean =>\n  supportsEvent('video', 'webkitfullscreenchange');\n\n/**\n * A helper that adds an event listener to an element. The key value-add over\n * the native addEventListener is that it returns a function that will remove\n * the event listener. This allows the setup and teardown logic for a listener\n * to be easily colocated.\n */\nfunction addEventListener(\n  element: Document | HTMLElement,\n  eventName: string,\n  listener: EventListenerOrEventListenerObject\n): () => any {\n  element.addEventListener(eventName, listener);\n  return () => element.removeEventListener(eventName, listener);\n}\n\n/**\n * Detect if the browser supports an event on a particular element type.\n */\nconst supportsEvent = (elementName: string, eventName: string): boolean => {\n  // Detect if the browser supports the event by attempting to add a handler\n  // attribute for that event to the provided element. If the event is supported\n  // then the browser will accept the attribute and report the type of the\n  // attribute as \"function\". See: https://stackoverflow.com/a/4562426/2747759\n  const element = document.createElement(elementName);\n  element.setAttribute('on' + eventName, 'return;');\n  return typeof element['on' + eventName] === 'function';\n};\n\n/**\n * Switches a video element into fullscreen.\n */\nexport async function requestFullscreen(element: HTMLMediaElement): Promise<void> {\n  if (supportsFullscreenAPI(element)) {\n    return element.requestFullscreen();\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['webkitEnterFullScreen']?.();\n  } else if (supportsMsFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['msRequestFullscreen']?.();\n  } else {\n    throw new Error('Fullscreen not supported');\n  }\n}\n\n/**\n * Switches a video element out of fullscreen.\n */\n\nexport async function exitFullscreen(element: HTMLMediaElement): Promise<void> {\n  if (supportsFullscreenAPI(element)) {\n    return document.exitFullscreen();\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['webkitExitFullScreen']?.();\n  } else if (supportsMsFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    document['msExitFullscreen']?.();\n  } else {\n    throw new Error('Fullscreen not supported');\n  }\n}\n\n/**\n * Listens for fullscreen change events on a video element. The provided\n * callback will be called with `true` when the video is switched into\n * fullscreen and `false` when the video is switched out of fullscreen.\n */\nexport function addFullscreenListener(\n  element: HTMLVideoElement,\n  callback: (isFullscreen: boolean) => void\n): () => any {\n  if (supportsFullscreenAPI(element)) {\n    // Used by browsers that support the official spec\n    return addEventListener(element, 'fullscreenchange', event =>\n      callback(document.fullscreenElement === event.target)\n    );\n  } else if (supportsWebkitFullscreenAPI(element) && supportsWebkitFullscreenChangeEvent()) {\n    // Used by Safari on macOS\n    return addEventListener(element, 'webkitfullscreenchange', event =>\n      callback(document['webkitFullscreenElement'] === event.target)\n    );\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // Used by Safari on iOS\n    const removeBeginListener = addEventListener(element, 'webkitbeginfullscreen', () =>\n      callback(true)\n    );\n    const removeEndListener = addEventListener(element, 'webkitendfullscreen', () =>\n      callback(false)\n    );\n    return () => {\n      removeBeginListener();\n      removeEndListener();\n    };\n  } else if (supportsMsFullscreenAPI(element)) {\n    // Used by IE11\n    return addEventListener(document, 'MSFullscreenChange', event =>\n      callback(document['msFullscreenElement'] === event.target)\n    );\n  } else {\n    return () => {};\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}