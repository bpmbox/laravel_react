{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import*as React from'react';import findNodeHandle from\"react-native-web/dist/exports/findNodeHandle\";import Image from\"react-native-web/dist/exports/Image\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{assertStatusValuesInBounds,getNativeSourceAndFullInitialStatusForLoadAsync,getNativeSourceFromSource,getUnloadedStatus,PlaybackMixin}from\"./AV\";import ExpoVideoManager from\"./ExpoVideoManager\";import ExponentAV from\"./ExponentAV\";import ExponentVideo from\"./ExponentVideo\";import{ResizeMode}from\"./Video.types\";export{ResizeMode};export var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=0;export var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=1;export var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=2;export var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=3;export var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;export var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;export var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;export var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;var _STYLES=StyleSheet.create({base:{overflow:'hidden'},poster:{position:'absolute',left:0,top:0,right:0,bottom:0,resizeMode:'contain'},video:{position:'absolute',left:0,top:0,right:0,bottom:0}});var ExpoVideoManagerConstants=ExpoVideoManager;var ExpoVideoViewManager=ExpoVideoManager;var Video=function(_React$Component){_inherits(Video,_React$Component);var _super=_createSuper(Video);function Video(props){var _this;_classCallCheck(this,Video);_this=_super.call(this,props);_this._nativeRef=React.createRef();_this._onPlaybackStatusUpdate=null;_this._handleNewStatus=function(status){if(_this.state.showPoster&&status.isLoaded&&(status.isPlaying||status.positionMillis!==0)){_this.setState({showPoster:false});}if(_this.props.onPlaybackStatusUpdate){_this.props.onPlaybackStatusUpdate(status);}if(_this._onPlaybackStatusUpdate){_this._onPlaybackStatusUpdate(status);}};_this._performOperationAndHandleStatusAsync=function _callee(operation){var video,handle,status;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:video=_this._nativeRef.current;if(video){_context.next=3;break;}throw new Error(\"Cannot complete operation because the Video component has not yet loaded\");case 3:handle=findNodeHandle(_this._nativeRef.current);_context.next=6;return _regeneratorRuntime.awrap(operation(handle));case 6:status=_context.sent;_this._handleNewStatus(status);return _context.abrupt(\"return\",status);case 9:case\"end\":return _context.stop();}}},null,null,null,Promise);};_this._setFullscreen=function _callee2(value){return _regeneratorRuntime.async(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return ExpoVideoViewManager.setFullscreen(tag,value);}));case 1:case\"end\":return _context2.stop();}}},null,null,null,Promise);};_this.presentFullscreenPlayer=function _callee3(){return _regeneratorRuntime.async(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:return _context3.abrupt(\"return\",_this._setFullscreen(true));case 1:case\"end\":return _context3.stop();}}},null,null,null,Promise);};_this.presentIOSFullscreenPlayer=function(){console.warn(\"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\");return _this.presentFullscreenPlayer();};_this.presentFullscreenPlayerAsync=function _callee4(){return _regeneratorRuntime.async(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return _regeneratorRuntime.awrap(_this.presentFullscreenPlayer());case 2:return _context4.abrupt(\"return\",_context4.sent);case 3:case\"end\":return _context4.stop();}}},null,null,null,Promise);};_this.dismissFullscreenPlayer=function _callee5(){return _regeneratorRuntime.async(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:return _context5.abrupt(\"return\",_this._setFullscreen(false));case 1:case\"end\":return _context5.stop();}}},null,null,null,Promise);};_this.dismissIOSFullscreenPlayer=function(){console.warn(\"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\");_this.dismissFullscreenPlayer();};_this.getStatusAsync=function _callee6(){return _regeneratorRuntime.async(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:return _context6.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.getStatusForVideo(tag);}));case 1:case\"end\":return _context6.stop();}}},null,null,null,Promise);};_this.loadAsync=function _callee7(source){var initialStatus,downloadFirst,_await$getNativeSourc,nativeSource,fullInitialStatus,_args7=arguments;return _regeneratorRuntime.async(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:initialStatus=_args7.length>1&&_args7[1]!==undefined?_args7[1]:{};downloadFirst=_args7.length>2&&_args7[2]!==undefined?_args7[2]:true;_context7.next=4;return _regeneratorRuntime.awrap(getNativeSourceAndFullInitialStatusForLoadAsync(source,initialStatus,downloadFirst));case 4:_await$getNativeSourc=_context7.sent;nativeSource=_await$getNativeSourc.nativeSource;fullInitialStatus=_await$getNativeSourc.fullInitialStatus;return _context7.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.loadForVideo(tag,nativeSource,fullInitialStatus);}));case 8:case\"end\":return _context7.stop();}}},null,null,null,Promise);};_this.unloadAsync=function _callee8(){return _regeneratorRuntime.async(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:return _context8.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.unloadForVideo(tag);}));case 1:case\"end\":return _context8.stop();}}},null,null,null,Promise);};_this.setStatusAsync=function _callee9(status){return _regeneratorRuntime.async(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:assertStatusValuesInBounds(status);return _context9.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.setStatusForVideo(tag,status);}));case 2:case\"end\":return _context9.stop();}}},null,null,null,Promise);};_this.replayAsync=function _callee10(){var status,_args10=arguments;return _regeneratorRuntime.async(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:status=_args10.length>0&&_args10[0]!==undefined?_args10[0]:{};if(!(status.positionMillis&&status.positionMillis!==0)){_context10.next=3;break;}throw new Error('Requested position after replay has to be 0.');case 3:return _context10.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.replayVideo(tag,_objectSpread(_objectSpread({},status),{},{positionMillis:0,shouldPlay:true}));}));case 4:case\"end\":return _context10.stop();}}},null,null,null,Promise);};_this._nativeOnPlaybackStatusUpdate=function(event){_this._handleNewStatus(event.nativeEvent);};_this._nativeOnLoadStart=function(){if(_this.props.onLoadStart){_this.props.onLoadStart();}};_this._nativeOnLoad=function(event){if(_this.props.onLoad){_this.props.onLoad(event.nativeEvent);}_this._handleNewStatus(event.nativeEvent);};_this._nativeOnError=function(event){var error=event.nativeEvent.error;if(_this.props.onError){_this.props.onError(error);}_this._handleNewStatus(getUnloadedStatus(error));};_this._nativeOnReadyForDisplay=function(event){if(_this.props.onReadyForDisplay){_this.props.onReadyForDisplay(event.nativeEvent);}};_this._nativeOnFullscreenUpdate=function(event){if(_this.props.onIOSFullscreenUpdate&&_this.props.onFullscreenUpdate){console.warn(\"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\");}else if(_this.props.onIOSFullscreenUpdate){console.warn(\"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\");}if(_this.props.onIOSFullscreenUpdate){_this.props.onIOSFullscreenUpdate(event.nativeEvent);}if(_this.props.onFullscreenUpdate){_this.props.onFullscreenUpdate(event.nativeEvent);}};_this._renderPoster=function(){return _this.props.usePoster&&_this.state.showPoster?React.createElement(Image,{style:[_STYLES.poster,_this.props.posterStyle],source:_this.props.posterSource}):null;};_this.state={showPoster:!!props.usePoster};return _this;}_createClass(Video,[{key:\"setNativeProps\",value:function setNativeProps(nativeProps){var nativeVideo=this._nativeRef.current;if(!nativeVideo)throw new Error(\"native video reference is not defined.\");nativeVideo.setNativeProps(nativeProps);}},{key:\"setOnPlaybackStatusUpdate\",value:function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate){this._onPlaybackStatusUpdate=onPlaybackStatusUpdate;this.getStatusAsync();}},{key:\"render\",value:function render(){var _this2=this;var source=getNativeSourceFromSource(this.props.source)||undefined;var nativeResizeMode=ExpoVideoManagerConstants.ScaleNone;if(this.props.resizeMode){var resizeMode=this.props.resizeMode;if(resizeMode===ResizeMode.STRETCH){nativeResizeMode=ExpoVideoManagerConstants.ScaleToFill;}else if(resizeMode===ResizeMode.CONTAIN){nativeResizeMode=ExpoVideoManagerConstants.ScaleAspectFit;}else if(resizeMode===ResizeMode.COVER){nativeResizeMode=ExpoVideoManagerConstants.ScaleAspectFill;}}var status=_objectSpread({},this.props.status);['progressUpdateIntervalMillis','positionMillis','shouldPlay','rate','shouldCorrectPitch','volume','isMuted','isLooping'].forEach(function(prop){if(prop in _this2.props){status[prop]=_this2.props[prop];}});var nativeProps=_objectSpread(_objectSpread({},omit(this.props,['source','onPlaybackStatusUpdate','usePoster','posterSource','posterStyle'].concat(_toConsumableArray(Object.keys(status))))),{},{style:StyleSheet.flatten([_STYLES.base,this.props.style]),source:source,resizeMode:nativeResizeMode,status:status,onStatusUpdate:this._nativeOnPlaybackStatusUpdate,onLoadStart:this._nativeOnLoadStart,onLoad:this._nativeOnLoad,onError:this._nativeOnError,onReadyForDisplay:this._nativeOnReadyForDisplay,onFullscreenUpdate:this._nativeOnFullscreenUpdate});return React.createElement(View,{style:nativeProps.style,pointerEvents:\"box-none\"},React.createElement(ExponentVideo,_extends({ref:this._nativeRef},nativeProps,{style:_STYLES.video})),this._renderPoster());}}]);return Video;}(React.Component);export{Video as default};Video.RESIZE_MODE_CONTAIN=ResizeMode.CONTAIN;Video.RESIZE_MODE_COVER=ResizeMode.COVER;Video.RESIZE_MODE_STRETCH=ResizeMode.STRETCH;Video.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;Video.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;Video.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;Video.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;Video.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;Video.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;Video.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;Video.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;function omit(props,propNames){var copied=_objectSpread({},props);for(var _iterator=_createForOfIteratorHelperLoose(propNames),_step;!(_step=_iterator()).done;){var propName=_step.value;delete copied[propName];}return copied;}_extends(Video.prototype,PlaybackMixin);","map":{"version":3,"sources":["../src/Video.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackNativeSource,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoNaturalSize,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nexport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoNaturalSize,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackNativeSource,\n};\n\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nexport default class Video extends React.Component<VideoProps, VideoState> implements Playback {\n  static RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\n  static RESIZE_MODE_COVER = ResizeMode.COVER;\n  static RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\n\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  static FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  // componentOrHandle: null | number | React.Component<any, any> | React.ComponentClass<any>\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: AVPlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // ### iOS Fullscreening API ###\n\n  _setFullscreen = async (value: boolean) => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  presentFullscreenPlayer = async () => {\n    return this._setFullscreen(true);\n  };\n\n  presentIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\"\n    );\n    return this.presentFullscreenPlayer();\n  };\n\n  presentFullscreenPlayerAsync = async () => {\n    return await this.presentFullscreenPlayer();\n  };\n\n  dismissFullscreenPlayer = async () => {\n    return this._setFullscreen(false);\n  };\n\n  dismissIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\"\n    );\n    this.dismissFullscreenPlayer();\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  // Loading / unloading API\n\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const {\n      nativeSource,\n      fullInitialStatus,\n    } = await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  // Equivalent to setting URI to null.\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  // Set status API (only available while isLoaded = true)\n\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // ### Callback wrappers ###\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onIOSFullscreenUpdate && this.props.onFullscreenUpdate) {\n      console.warn(\n        \"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\"\n      );\n    } else if (this.props.onIOSFullscreenUpdate) {\n      console.warn(\n        \"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\"\n      );\n    }\n\n    if (this.props.onIOSFullscreenUpdate) {\n      this.props.onIOSFullscreenUpdate(event.nativeEvent);\n    }\n\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () =>\n    this.props.usePoster && this.state.showPoster ? (\n      // @ts-ignore: the react-native type declarations are overly restrictive\n      <Image style={[_STYLES.poster, this.props.posterStyle]} source={this.props.posterSource!} />\n    ) : null;\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach(prop => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    // @ts-ignore: TypeScript thinks \"children\" is not in the list of props\n    const nativeProps: VideoNativeProps = {\n      ...omit(this.props, [\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status),\n      ]),\n      style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style} pointerEvents=\"box-none\">\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={_STYLES.video} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}