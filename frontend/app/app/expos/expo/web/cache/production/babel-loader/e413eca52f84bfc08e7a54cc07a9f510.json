{"ast":null,"code":"var _require=require(\"./dateutils\"),isToday=_require.isToday,isDateNotInTheRange=_require.isDateNotInTheRange,sameMonth=_require.sameMonth;var _require2=require(\"./interface\"),parseDate=_require2.parseDate,toMarkingFormat=_require2.toMarkingFormat;function getState(day,current,props){var minDate=props.minDate,maxDate=props.maxDate,disabledByDefault=props.disabledByDefault,context=props.context;var _minDate=parseDate(minDate);var _maxDate=parseDate(maxDate);var state='';if((context==null?void 0:context.date)===toMarkingFormat(day)){state='selected';}else if(isToday(day)){state='today';}if(disabledByDefault){state='disabled';}else if(isDateNotInTheRange(_minDate,_maxDate,day)){state='disabled';}else if(!sameMonth(day,current)){state='disabled';}return state;}export{getState};","map":{"version":3,"sources":["/app/node_modules/react-native-calendars/src/day-state-manager.js"],"names":["require","isToday","isDateNotInTheRange","sameMonth","parseDate","toMarkingFormat","getState","day","current","props","minDate","maxDate","disabledByDefault","context","_minDate","_maxDate","state","date"],"mappings":"aAAkDA,OAAO,e,CAAlDC,O,UAAAA,O,CAASC,mB,UAAAA,mB,CAAqBC,S,UAAAA,S,eACAH,OAAO,e,CAArCI,S,WAAAA,S,CAAWC,e,WAAAA,e,CAElB,QAASC,CAAAA,QAAT,CAAkBC,GAAlB,CAAuBC,OAAvB,CAAgCC,KAAhC,CAAuC,IAC9BC,CAAAA,OAD8B,CACkBD,KADlB,CAC9BC,OAD8B,CACrBC,OADqB,CACkBF,KADlB,CACrBE,OADqB,CACZC,iBADY,CACkBH,KADlB,CACZG,iBADY,CACOC,OADP,CACkBJ,KADlB,CACOI,OADP,CAErC,GAAMC,CAAAA,QAAQ,CAAGV,SAAS,CAACM,OAAD,CAA1B,CACA,GAAMK,CAAAA,QAAQ,CAAGX,SAAS,CAACO,OAAD,CAA1B,CACA,GAAIK,CAAAA,KAAK,CAAG,EAAZ,CAEA,GAAI,CAAAH,OAAO,MAAP,QAAAA,OAAO,CAAEI,IAAT,IAAkBZ,eAAe,CAACE,GAAD,CAArC,CAA4C,CAC1CS,KAAK,CAAG,UAAR,CACD,CAFD,IAEO,IAAIf,OAAO,CAACM,GAAD,CAAX,CAAkB,CACvBS,KAAK,CAAG,OAAR,CACD,CACD,GAAIJ,iBAAJ,CAAuB,CACrBI,KAAK,CAAG,UAAR,CACD,CAFD,IAEO,IAAId,mBAAmB,CAACY,QAAD,CAAWC,QAAX,CAAqBR,GAArB,CAAvB,CAAkD,CACvDS,KAAK,CAAG,UAAR,CACD,CAFM,IAEA,IAAI,CAACb,SAAS,CAACI,GAAD,CAAMC,OAAN,CAAd,CAA8B,CACnCQ,KAAK,CAAG,UAAR,CACD,CAED,MAAOA,CAAAA,KAAP,CACD,CAED,OAAQV,QAAR","sourcesContent":["const {isToday, isDateNotInTheRange, sameMonth} = require('./dateutils');\nconst {parseDate, toMarkingFormat} = require('./interface');\n\nfunction getState(day, current, props) {\n  const {minDate, maxDate, disabledByDefault, context} = props;\n  const _minDate = parseDate(minDate);\n  const _maxDate = parseDate(maxDate);\n  let state = '';\n\n  if (context?.date === toMarkingFormat(day)) {\n    state = 'selected';\n  } else if (isToday(day)) {\n    state = 'today';\n  }\n  if (disabledByDefault) {\n    state = 'disabled';\n  } else if (isDateNotInTheRange(_minDate, _maxDate, day)) {\n    state = 'disabled';\n  } else if (!sameMonth(day, current)) {\n    state = 'disabled';\n  }\n\n  return state;\n}\n\nexport {getState};\n"]},"metadata":{},"sourceType":"module"}