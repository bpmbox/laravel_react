{"ast":null,"code":"var XDate=require('xdate');var _require=require(\"./interface\"),parseDate=_require.parseDate;function sameMonth(a,b){return a instanceof XDate&&b instanceof XDate&&a.getFullYear()===b.getFullYear()&&a.getMonth()===b.getMonth();}function sameDate(a,b){return a instanceof XDate&&b instanceof XDate&&a.getFullYear()===b.getFullYear()&&a.getMonth()===b.getMonth()&&a.getDate()===b.getDate();}function sameWeek(d1,d2,firstDayOfWeek){var weekDates=getWeekDates(d1,firstDayOfWeek,'yyyy-MM-dd');return weekDates==null?void 0:weekDates.includes(d2);}function isToday(day){return sameDate(XDate(day),XDate.today());}function isGTE(a,b){return b.diffDays(a)>-1;}function isLTE(a,b){return a.diffDays(b)>-1;}function fromTo(a,b){var days=[];var from=+a,to=+b;for(;from<=to;from=new XDate(from,true).addDays(1).getTime()){days.push(new XDate(from,true));}return days;}function month(xd){var year=xd.getFullYear(),month=xd.getMonth();var days=new Date(year,month+1,0).getDate();var firstDay=new XDate(year,month,1,0,0,0,true);var lastDay=new XDate(year,month,days,0,0,0,true);return fromTo(firstDay,lastDay);}function weekDayNames(){var firstDayOfWeek=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var weekDaysNames=XDate.locales[XDate.defaultLocale].dayNamesShort;var dayShift=firstDayOfWeek%7;if(dayShift){weekDaysNames=weekDaysNames.slice(dayShift).concat(weekDaysNames.slice(0,dayShift));}return weekDaysNames;}function page(xd,firstDayOfWeek,showSixWeeks){var days=month(xd);var before=[],after=[];var fdow=(7+firstDayOfWeek)%7||7;var ldow=(fdow+6)%7;firstDayOfWeek=firstDayOfWeek||0;var from=days[0].clone();var daysBefore=from.getDay();if(from.getDay()!==fdow){from.addDays(-(from.getDay()+7-fdow)%7);}var to=days[days.length-1].clone();var day=to.getDay();if(day!==ldow){to.addDays((ldow+7-day)%7);}var daysForSixWeeks=(daysBefore+days.length)/6>=6;if(showSixWeeks&&!daysForSixWeeks){to.addDays(7);}if(isLTE(from,days[0])){before=fromTo(from,days[0]);}if(isGTE(to,days[days.length-1])){after=fromTo(days[days.length-1],to);}return before.concat(days.slice(1,days.length-1),after);}function isDateNotInTheRange(minDate,maxDate,date){return minDate&&!isGTE(date,minDate)||maxDate&&!isLTE(date,maxDate);}function getWeekDates(date,firstDay,format){if(date&&parseDate(date).valid()){var current=parseDate(date);var daysArray=[current];var dayOfTheWeek=current.getDay()-firstDay;if(dayOfTheWeek<0){dayOfTheWeek=7+dayOfTheWeek;}var newDate=current;var index=dayOfTheWeek-1;while(index>=0){newDate=parseDate(newDate).addDays(-1);daysArray.unshift(newDate);index-=1;}newDate=current;index=dayOfTheWeek+1;while(index<7){newDate=parseDate(newDate).addDays(1);daysArray.push(newDate);index+=1;}if(format){return daysArray.map(function(d){return d.toString(format);});}return daysArray;}}export{weekDayNames,sameMonth,sameWeek,sameDate,month,page,fromTo,isToday,isLTE,isGTE,isDateNotInTheRange,getWeekDates};","map":{"version":3,"sources":["/app/node_modules/react-native-calendars/src/dateutils.js"],"names":["XDate","require","parseDate","sameMonth","a","b","getFullYear","getMonth","sameDate","getDate","sameWeek","d1","d2","firstDayOfWeek","weekDates","getWeekDates","includes","isToday","day","today","isGTE","diffDays","isLTE","fromTo","days","from","to","addDays","getTime","push","month","xd","year","Date","firstDay","lastDay","weekDayNames","weekDaysNames","locales","defaultLocale","dayNamesShort","dayShift","slice","concat","page","showSixWeeks","before","after","fdow","ldow","clone","daysBefore","getDay","length","daysForSixWeeks","isDateNotInTheRange","minDate","maxDate","date","format","valid","current","daysArray","dayOfTheWeek","newDate","index","unshift","map","d","toString"],"mappings":"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","sourcesContent":["const XDate = require('xdate');\nconst {parseDate} = require('./interface');\n\nfunction sameMonth(a, b) {\n  return (\n    a instanceof XDate && b instanceof XDate && a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth()\n  );\n}\n\nfunction sameDate(a, b) {\n  return (\n    a instanceof XDate &&\n    b instanceof XDate &&\n    a.getFullYear() === b.getFullYear() &&\n    a.getMonth() === b.getMonth() &&\n    a.getDate() === b.getDate()\n  );\n}\n\nfunction sameWeek(d1, d2, firstDayOfWeek) {\n  const weekDates = getWeekDates(d1, firstDayOfWeek, 'yyyy-MM-dd');\n  return weekDates?.includes(d2);\n}\n\nfunction isToday(day) {\n  return sameDate(XDate(day), XDate.today());\n}\n\nfunction isGTE(a, b) {\n  return b.diffDays(a) > -1;\n}\n\nfunction isLTE(a, b) {\n  return a.diffDays(b) > -1;\n}\n\nfunction fromTo(a, b) {\n  const days = [];\n  let from = +a,\n    to = +b;\n  for (; from <= to; from = new XDate(from, true).addDays(1).getTime()) {\n    days.push(new XDate(from, true));\n  }\n  return days;\n}\n\nfunction month(xd) {\n  const year = xd.getFullYear(),\n    month = xd.getMonth();\n  const days = new Date(year, month + 1, 0).getDate();\n\n  const firstDay = new XDate(year, month, 1, 0, 0, 0, true);\n  const lastDay = new XDate(year, month, days, 0, 0, 0, true);\n\n  return fromTo(firstDay, lastDay);\n}\n\nfunction weekDayNames(firstDayOfWeek = 0) {\n  let weekDaysNames = XDate.locales[XDate.defaultLocale].dayNamesShort;\n  const dayShift = firstDayOfWeek % 7;\n  if (dayShift) {\n    weekDaysNames = weekDaysNames.slice(dayShift).concat(weekDaysNames.slice(0, dayShift));\n  }\n  return weekDaysNames;\n}\n\nfunction page(xd, firstDayOfWeek, showSixWeeks) {\n  const days = month(xd);\n  let before = [],\n    after = [];\n\n  const fdow = (7 + firstDayOfWeek) % 7 || 7;\n  const ldow = (fdow + 6) % 7;\n\n  firstDayOfWeek = firstDayOfWeek || 0;\n\n  const from = days[0].clone();\n  const daysBefore = from.getDay();\n\n  if (from.getDay() !== fdow) {\n    from.addDays(-(from.getDay() + 7 - fdow) % 7);\n  }\n\n  const to = days[days.length - 1].clone();\n  const day = to.getDay();\n  if (day !== ldow) {\n    to.addDays((ldow + 7 - day) % 7);\n  }\n\n  const daysForSixWeeks = (daysBefore + days.length) / 6 >= 6;\n\n  if (showSixWeeks && !daysForSixWeeks) {\n    to.addDays(7);\n  }\n\n  if (isLTE(from, days[0])) {\n    before = fromTo(from, days[0]);\n  }\n\n  if (isGTE(to, days[days.length - 1])) {\n    after = fromTo(days[days.length - 1], to);\n  }\n\n  return before.concat(days.slice(1, days.length - 1), after);\n}\n\nfunction isDateNotInTheRange(minDate, maxDate, date) {\n  return (minDate && !isGTE(date, minDate)) || (maxDate && !isLTE(date, maxDate));\n}\n\nfunction getWeekDates(date, firstDay, format) {\n  if (date && parseDate(date).valid()) {\n    const current = parseDate(date);\n    const daysArray = [current];\n    let dayOfTheWeek = current.getDay() - firstDay;\n    if (dayOfTheWeek < 0) {\n      // to handle firstDay > 0\n      dayOfTheWeek = 7 + dayOfTheWeek;\n    }\n\n    let newDate = current;\n    let index = dayOfTheWeek - 1;\n    while (index >= 0) {\n      newDate = parseDate(newDate).addDays(-1);\n      daysArray.unshift(newDate);\n      index -= 1;\n    }\n\n    newDate = current;\n    index = dayOfTheWeek + 1;\n    while (index < 7) {\n      newDate = parseDate(newDate).addDays(1);\n      daysArray.push(newDate);\n      index += 1;\n    }\n\n    if (format) {\n      return daysArray.map(d => d.toString(format));\n    }\n\n    return daysArray;\n  }\n}\n\nexport {\n  weekDayNames,\n  sameMonth,\n  sameWeek,\n  sameDate,\n  month,\n  page,\n  fromTo,\n  isToday,\n  isLTE,\n  isGTE,\n  isDateNotInTheRange,\n  getWeekDates\n};\n"]},"metadata":{},"sourceType":"module"}