{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.useIMGElementProps=useIMGElementProps;exports.default=void 0;var _react=_interopRequireDefault(require(\"react\"));var _IMGElement=_interopRequireDefault(require(\"../elements/IMGElement\"));var _SharedPropsProvider=require(\"../context/SharedPropsProvider\");var _useNormalizedUrl=_interopRequireDefault(require(\"../hooks/useNormalizedUrl\"));var _RenderersPropsProvider=require(\"../context/RenderersPropsProvider\");var _useContentWidth=_interopRequireDefault(require(\"../hooks/useContentWidth\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function useIMGElementProps(props){var style=props.style,tnode=props.tnode,onPress=props.onPress;var contentWidth=(0,_useContentWidth.default)();var _ref=(0,_RenderersPropsProvider.useRendererProps)('img'),initialDimensions=_ref.initialDimensions,enableExperimentalPercentWidth=_ref.enableExperimentalPercentWidth;var computeImagesMaxWidth=(0,_SharedPropsProvider.useComputeMaxWidthForTag)('img');var src=tnode.attributes.src||'';return{contentWidth:contentWidth,computeMaxWidth:computeImagesMaxWidth,enableExperimentalPercentWidth:enableExperimentalPercentWidth,initialDimensions:initialDimensions,onPress:onPress,alt:tnode.attributes.alt,testID:'img',altColor:tnode.styles.nativeTextFlow.color,source:{uri:(0,_useNormalizedUrl.default)(src)},style:style,width:tnode.attributes.width,height:tnode.attributes.height,objectFit:tnode.styles.webBlockRet.objectFit};}var IMGRenderer=function IMGRenderer(props){return _react.default.createElement(_IMGElement.default,useIMGElementProps(props));};var _default=IMGRenderer;exports.default=_default;","map":{"version":3,"sources":["IMGRenderer.tsx"],"names":["onPress","contentWidth","enableExperimentalPercentWidth","computeImagesMaxWidth","src","tnode","computeMaxWidth","initialDimensions","alt","testID","altColor","source","uri","style","width","height","objectFit","IMGRenderer","props","React","IMGElement","useIMGElementProps"],"mappings":"2IAAA,GAAA,CAAA,MAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAEA,GAAA,CAAA,WAAA,CAAA,sBAAA,CAAA,OAAA,0BAAA,CAAA,CAEA,GAAA,CAAA,oBAAA,CAAA,OAAA,kCAAA,CAGA,GAAA,CAAA,iBAAA,CAAA,sBAAA,CAAA,OAAA,6BAAA,CAAA,CACA,GAAA,CAAA,uBAAA,CAAA,OAAA,qCAAA,CACA,GAAA,CAAA,gBAAA,CAAA,sBAAA,CAAA,OAAA,4BAAA,CAAA,C,mFAMO,QAAA,CAAA,kBAAA,CAAA,KAAA,CAEY,IACX,CAAA,KADW,CACjB,KADiB,CACX,KADW,CACX,KADW,CACjB,KADiB,CACX,KADW,CACKA,OADL,CACjB,KADiB,CACKA,OADL,CAEjB,GAAMC,CAAAA,YAAY,CAAG,CAAA,EAAA,gBAAA,CAArB,OAAqB,GAArB,CAFiB,SAIf,CAAA,EAAA,uBAAA,CAAA,gBAAA,EADF,KACE,CAJe,CAGX,iBAHW,MAGX,iBAHW,CAGUC,8BAHV,MAGUA,8BAHV,CAKjB,GAAMC,CAAAA,qBAAqB,CAAG,CAAA,EAAA,oBAAA,CAAA,wBAAA,EAA9B,KAA8B,CAA9B,CACA,GAAMC,CAAAA,GAAG,CAAGC,KAAK,CAALA,UAAAA,CAAAA,GAAAA,EAAZ,EAAA,CACA,MAAO,CACLJ,YADK,CACLA,YADK,CAELK,eAAe,CAFV,qBAAA,CAGLJ,8BAHK,CAGLA,8BAHK,CAILK,iBAJK,CAILA,iBAJK,CAKLP,OALK,CAKLA,OALK,CAMLQ,GAAG,CAAEH,KAAK,CAALA,UAAAA,CANA,GAAA,CAOLI,MAAM,CAPD,KAAA,CAQLC,QAAQ,CAAEL,KAAK,CAALA,MAAAA,CAAAA,cAAAA,CARL,KAAA,CASLM,MAAM,CAAE,CAAEC,GAAG,CAAE,CAAA,EAAA,iBAAA,CAAA,OAAA,EAAA,GAAA,CAAP,CATH,CAULC,KAAK,CAVA,KAAA,CAWLC,KAAK,CAAET,KAAK,CAALA,UAAAA,CAXF,KAAA,CAYLU,MAAM,CAAEV,KAAK,CAALA,UAAAA,CAZH,MAAA,CAaLW,SAAS,CAAEX,KAAK,CAALA,MAAAA,CAAAA,WAAAA,CAAyBW,SAb/B,CAAP,CAeD,CAED,GAAMC,CAAAA,WAAkC,CAAIC,QAAtCD,CAAAA,WAAsCC,CAAAA,KAAD,CAAW,CACpD,MAAOC,CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,aAAAA,CAAoBC,WAAAA,CAApBD,OAAAA,CAAgCE,kBAAkB,CAAzD,KAAyD,CAAlDF,CAAP,CADF,CAAA,C,aAIeF,W","sourcesContent":["import React from 'react';\nimport { TBlock } from '@native-html/transient-render-engine';\nimport IMGElement, { IMGElementProps } from '../elements/IMGElement';\nimport { InternalBlockRenderer } from '../render/render-types';\nimport { useComputeMaxWidthForTag } from '../context/SharedPropsProvider';\nimport { ImageStyle } from 'react-native';\nimport { InternalRendererProps } from '../shared-types';\nimport useNormalizedUrl from '../hooks/useNormalizedUrl';\nimport { useRendererProps } from '../context/RenderersPropsProvider';\nimport useContentWidth from '../hooks/useContentWidth';\n\n/**\n * A hook to produce props consumable by {@link IMGElement} component\n * from custom renderer props.\n */\nexport function useIMGElementProps(\n  props: InternalRendererProps<TBlock>\n): IMGElementProps {\n  const { style, tnode, onPress } = props;\n  const contentWidth = useContentWidth();\n  const { initialDimensions, enableExperimentalPercentWidth } =\n    useRendererProps('img');\n  const computeImagesMaxWidth = useComputeMaxWidthForTag('img');\n  const src = tnode.attributes.src || '';\n  return {\n    contentWidth,\n    computeMaxWidth: computeImagesMaxWidth,\n    enableExperimentalPercentWidth,\n    initialDimensions,\n    onPress,\n    alt: tnode.attributes.alt,\n    testID: 'img',\n    altColor: tnode.styles.nativeTextFlow.color as string,\n    source: { uri: useNormalizedUrl(src) },\n    style: style as ImageStyle,\n    width: tnode.attributes.width,\n    height: tnode.attributes.height,\n    objectFit: tnode.styles.webBlockRet.objectFit\n  };\n}\n\nconst IMGRenderer: InternalBlockRenderer = (props) => {\n  return React.createElement(IMGElement, useIMGElementProps(props));\n};\n\nexport default IMGRenderer;\n"]},"metadata":{},"sourceType":"script"}