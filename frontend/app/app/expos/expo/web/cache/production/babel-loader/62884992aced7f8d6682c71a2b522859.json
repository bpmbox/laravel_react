{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _react=_interopRequireWildcard(require(\"react\"));var _TBlockRenderer=_interopRequireDefault(require(\"./TBlockRenderer\"));var _TPhrasingRenderer=_interopRequireDefault(require(\"./TPhrasingRenderer\"));var _TTextRenderer=_interopRequireDefault(require(\"./TTextRenderer\"));var _SharedPropsProvider=require(\"./context/SharedPropsProvider\");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}var TNodeRenderer=(0,_react.memo)(function MemoizedTNodeRenderer(props){var tnode=props.tnode;var sharedProps=(0,_SharedPropsProvider.useSharedProps)();var tnodeProps=_objectSpread(_objectSpread({},props),{},{sharedProps:sharedProps});if(tnode.type==='block'||tnode.type==='document'){return _react.default.createElement(_TBlockRenderer.default,tnodeProps);}if(tnode.type==='phrasing'){return _react.default.createElement(_TPhrasingRenderer.default,tnodeProps);}if(tnode.type==='text'){return _react.default.createElement(_TTextRenderer.default,tnodeProps);}if(tnode.type==='empty'&&__DEV__){if(tnode.isUnregistered){console.warn(\"There is no custom renderer registered for tag \\\"\"+tnode.tagName+\"\\\" which is not part of the HTML5 standard. The tag will not be rendered.\"+' If you don\\'t want this tag to be rendered, add it to \"ignoredTags\" prop array. If you do, register a custom renderer for this tag.');}else if(tnode.tagName!=='head'){console.warn(\"The \\\"\"+tnode.tagName+\"\\\" tag is a valid HTML element but is not handled by this library. You must register a custom renderer or plugin and make sure its content model is not set to \\\"none\\\".\"+' If you don\\'t want this tag to be rendered, add it to \"ignoredTags\" prop array.');}}return null;});var defaultProps={propsFromParent:{collapsedMarginTop:null}};TNodeRenderer.defaultProps=defaultProps;var _default=TNodeRenderer;exports.default=_default;","map":{"version":3,"sources":["TNodeRenderer.tsx"],"names":["TNodeRenderer","tnode","sharedProps","tnodeProps","React","TBlockRenderer","TPhrasingRenderer","TTextRenderer","console","defaultProps","propsFromParent","collapsedMarginTop"],"mappings":"g8BAAA,GAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACA,GAAA,CAAA,eAAA,CAAA,sBAAA,CAAA,OAAA,oBAAA,CAAA,CACA,GAAA,CAAA,kBAAA,CAAA,sBAAA,CAAA,OAAA,uBAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,sBAAA,CAAA,OAAA,mBAAA,CAAA,CAEA,GAAA,CAAA,oBAAA,CAAA,OAAA,iCAAA,C,6kCAOA,GAAMA,CAAAA,aAAa,CAAG,CAAA,EAAA,MAAA,CAAA,IAAA,EAAK,QAAA,CAAA,qBAAA,CAAA,KAAA,CAEJ,IACbC,CAAAA,KADa,CACrB,KADqB,CACbA,KADa,CAErB,GAAMC,CAAAA,WAAW,CAAG,CAAA,EAAA,oBAAA,CAApB,cAAoB,GAApB,CACA,GAAMC,CAAAA,UAAU,gCAAG,KAAH,MAEdD,WAAAA,CAAAA,WAFc,EAAhB,CAIA,GAAID,KAAK,CAALA,IAAAA,GAAAA,OAAAA,EAA0BA,KAAK,CAALA,IAAAA,GAA9B,UAAA,CAAyD,CACvD,MAAOG,CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,aAAAA,CAAoBC,eAAAA,CAApBD,OAAAA,CAAP,UAAOA,CAAP,CACD,CACD,GAAIH,KAAK,CAALA,IAAAA,GAAJ,UAAA,CAA+B,CAC7B,MAAOG,CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,aAAAA,CAAoBE,kBAAAA,CAApBF,OAAAA,CAAP,UAAOA,CAAP,CACD,CACD,GAAIH,KAAK,CAALA,IAAAA,GAAJ,MAAA,CAA2B,CACzB,MAAOG,CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,aAAAA,CAAoBG,cAAAA,CAApBH,OAAAA,CAAP,UAAOA,CAAP,CACD,CACD,GAAIH,KAAK,CAALA,IAAAA,GAAAA,OAAAA,EAAJ,OAAA,CAAuC,CACrC,GAAIA,KAAK,CAAT,cAAA,CAA0B,CACxBO,OAAO,CAAPA,IAAAA,CACG,oDAAkDP,KAAK,CAAxD,OAAC,6EADHO,sIAAAA,EADF,CAAA,IAKO,IAAIP,KAAK,CAALA,OAAAA,GAAJ,MAAA,CAA8B,CACnCO,OAAO,CAAPA,IAAAA,CACG,SAAOP,KAAK,CAAb,OAAC,4KADHO,kFAAAA,EAID,CACF,CACD,MAAA,KAAA,CA/BF,CAAsB,CAAtB,CAkCA,GAAMC,CAAAA,YAAwE,CAC5E,CACEC,eAAe,CAAE,CACfC,kBAAkB,CAAE,IADL,CADnB,CADF,CAQAX,aAAa,CAAbA,YAAAA,CAAAA,YAAAA,C,aAEeA,a","sourcesContent":["import React, { memo, ReactElement } from 'react';\nimport TBlockRenderer from './TBlockRenderer';\nimport TPhrasingRenderer from './TPhrasingRenderer';\nimport TTextRenderer from './TTextRenderer';\nimport { TNodeRendererProps } from './shared-types';\nimport { useSharedProps } from './context/SharedPropsProvider';\n\nexport type { TNodeRendererProps } from './shared-types';\n\n/**\n * A component to render any {@link TNode}.\n */\nconst TNodeRenderer = memo(function MemoizedTNodeRenderer(\n  props: TNodeRendererProps<any>\n): ReactElement | null {\n  const { tnode } = props;\n  const sharedProps = useSharedProps();\n  const tnodeProps = {\n    ...props,\n    sharedProps\n  };\n  if (tnode.type === 'block' || tnode.type === 'document') {\n    return React.createElement(TBlockRenderer, tnodeProps);\n  }\n  if (tnode.type === 'phrasing') {\n    return React.createElement(TPhrasingRenderer, tnodeProps);\n  }\n  if (tnode.type === 'text') {\n    return React.createElement(TTextRenderer, tnodeProps);\n  }\n  if (tnode.type === 'empty' && __DEV__) {\n    if (tnode.isUnregistered) {\n      console.warn(\n        `There is no custom renderer registered for tag \"${tnode.tagName}\" which is not part of the HTML5 standard. The tag will not be rendered.` +\n          ' If you don\\'t want this tag to be rendered, add it to \"ignoredTags\" prop array. If you do, register a custom renderer for this tag.'\n      );\n    } else if (tnode.tagName !== 'head') {\n      console.warn(\n        `The \"${tnode.tagName}\" tag is a valid HTML element but is not handled by this library. You must register a custom renderer or plugin and make sure its content model is not set to \"none\".` +\n          ' If you don\\'t want this tag to be rendered, add it to \"ignoredTags\" prop array.'\n      );\n    }\n  }\n  return null;\n});\n\nconst defaultProps: Required<Pick<TNodeRendererProps<any>, 'propsFromParent'>> =\n  {\n    propsFromParent: {\n      collapsedMarginTop: null\n    }\n  };\n\n/* @ts-ignore*/\nTNodeRenderer.defaultProps = defaultProps;\n\nexport default TNodeRenderer;\n"]},"metadata":{},"sourceType":"script"}