{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import ExponentAV from\"./ExponentAV\";export*from\"./Audio/Recording\";export*from\"./Audio/Sound\";export{setIsEnabledAsync}from\"./Audio/AudioAvailability\";export{PitchCorrectionQuality}from\"./AV\";export var INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS=0;export var INTERRUPTION_MODE_IOS_DO_NOT_MIX=1;export var INTERRUPTION_MODE_IOS_DUCK_OTHERS=2;export var INTERRUPTION_MODE_ANDROID_DO_NOT_MIX=1;export var INTERRUPTION_MODE_ANDROID_DUCK_OTHERS=2;var _isValueValid=function _isValueValid(value,validValues){return validValues.filter(function(validValue){return validValue===value;}).length>0;};var _populateMissingKeys=function _populateMissingKeys(userAudioMode,defaultAudioMode){for(var key in defaultAudioMode){if(!userAudioMode.hasOwnProperty(key)){userAudioMode[key]=defaultAudioMode[key];}}return userAudioMode;};var defaultMode={allowsRecordingIOS:false,interruptionModeIOS:INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,playsInSilentModeIOS:false,staysActiveInBackground:false,interruptionModeAndroid:INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,shouldDuckAndroid:true,playThroughEarpieceAndroid:false};var currentAudioMode=null;function getCurrentAudioMode(){if(!currentAudioMode){return defaultMode;}return currentAudioMode;}export function setAudioModeAsync(partialMode){var mode;return _regeneratorRuntime.async(function setAudioModeAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:mode=_populateMissingKeys(partialMode,getCurrentAudioMode());if(_isValueValid(mode.interruptionModeIOS,[INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,INTERRUPTION_MODE_IOS_DO_NOT_MIX,INTERRUPTION_MODE_IOS_DUCK_OTHERS])){_context.next=3;break;}throw new Error(\"\\\"interruptionModeIOS\\\" was set to an invalid value.\");case 3:if(_isValueValid(mode.interruptionModeAndroid,[INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,INTERRUPTION_MODE_ANDROID_DUCK_OTHERS])){_context.next=5;break;}throw new Error(\"\\\"interruptionModeAndroid\\\" was set to an invalid value.\");case 5:if(!(typeof mode.allowsRecordingIOS!=='boolean'||typeof mode.playsInSilentModeIOS!=='boolean'||typeof mode.staysActiveInBackground!=='boolean'||typeof mode.shouldDuckAndroid!=='boolean'||typeof mode.playThroughEarpieceAndroid!=='boolean')){_context.next=7;break;}throw new Error('\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.');case 7:currentAudioMode=mode;_context.next=10;return _regeneratorRuntime.awrap(ExponentAV.setAudioMode(mode));case 10:return _context.abrupt(\"return\",_context.sent);case 11:case\"end\":return _context.stop();}}},null,null,null,Promise);}","map":{"version":3,"sources":["../src/Audio.ts"],"names":[],"mappings":"4DAAA,MAAO,CAAA,UAAP,oBAEA,+BACA,2BACA,OAAS,iBAAT,iCACA,OAAS,sBAAT,YAYA,MAAO,IAAM,CAAA,qCAAqC,CAAG,CAA9C,CACP,MAAO,IAAM,CAAA,gCAAgC,CAAG,CAAzC,CACP,MAAO,IAAM,CAAA,iCAAiC,CAAG,CAA1C,CAEP,MAAO,IAAM,CAAA,oCAAoC,CAAG,CAA7C,CACP,MAAO,IAAM,CAAA,qCAAqC,CAAG,CAA9C,CAGP,GAAM,CAAA,aAAa,CAAG,QAAhB,CAAA,aAAgB,CAAC,KAAD,CAAa,WAAb,CAA4C,CAChE,MAAO,CAAA,WAAW,CAAC,MAAZ,CAAmB,SAAA,UAAU,QAAI,CAAA,UAAU,GAAK,KAAnB,EAA7B,EAAuD,MAAvD,CAAgE,CAAvE,CACD,CAFD,CAIA,GAAM,CAAA,oBAAoB,CAAG,QAAvB,CAAA,oBAAuB,CAC3B,aAD2B,CAE3B,gBAF2B,CAGd,CACb,IAAK,GAAM,CAAA,GAAX,GAAkB,CAAA,gBAAlB,CAAoC,CAClC,GAAI,CAAC,aAAa,CAAC,cAAd,CAA6B,GAA7B,CAAL,CAAwC,CACtC,aAAa,CAAC,GAAD,CAAb,CAAqB,gBAAgB,CAAC,GAAD,CAArC,CACD,CACF,CACD,MAAO,CAAA,aAAP,CACD,CAVD,CAYA,GAAM,CAAA,WAAW,CAAc,CAC7B,kBAAkB,CAAE,KADS,CAE7B,mBAAmB,CAAE,qCAFQ,CAG7B,oBAAoB,CAAE,KAHO,CAI7B,uBAAuB,CAAE,KAJI,CAK7B,uBAAuB,CAAE,qCALI,CAM7B,iBAAiB,CAAE,IANU,CAO7B,0BAA0B,CAAE,KAPC,CAA/B,CAUA,GAAI,CAAA,gBAAgB,CAAqB,IAAzC,CAEA,QAAS,CAAA,mBAAT,EAA4B,CAC1B,GAAI,CAAC,gBAAL,CAAuB,CACrB,MAAO,CAAA,WAAP,CACD,CACD,MAAO,CAAA,gBAAP,CACD,CAED,MAAO,SAAe,CAAA,iBAAf,CAAiC,WAAjC,sIACC,IADD,CACQ,oBAAoB,CAAC,WAAD,CAAc,mBAAmB,EAAjC,CAD5B,IAIF,aAAa,CAAC,IAAI,CAAC,mBAAN,CAA2B,CACvC,qCADuC,CAEvC,gCAFuC,CAGvC,iCAHuC,CAA3B,CAJX,8BAUG,IAAI,CAAA,KAAJ,wDAVH,WAaF,aAAa,CAAC,IAAI,CAAC,uBAAN,CAA+B,CAC3C,oCAD2C,CAE3C,qCAF2C,CAA/B,CAbX,8BAkBG,IAAI,CAAA,KAAJ,4DAlBH,aAqBH,MAAO,CAAA,IAAI,CAAC,kBAAZ,GAAmC,SAAnC,EACA,MAAO,CAAA,IAAI,CAAC,oBAAZ,GAAqC,SADrC,EAEA,MAAO,CAAA,IAAI,CAAC,uBAAZ,GAAwC,SAFxC,EAGA,MAAO,CAAA,IAAI,CAAC,iBAAZ,GAAkC,SAHlC,EAIA,MAAO,CAAA,IAAI,CAAC,0BAAZ,GAA2C,SAzBxC,+BA2BG,IAAI,CAAA,KAAJ,CACJ,iJADI,CA3BH,QA+BL,gBAAgB,CAAG,IAAnB,CA/BK,kDAgCQ,UAAU,CAAC,YAAX,CAAwB,IAAxB,CAhCR","sourcesContent":["import ExponentAV from './ExponentAV';\n\nexport * from './Audio/Recording';\nexport * from './Audio/Sound';\nexport { setIsEnabledAsync } from './Audio/AudioAvailability';\nexport { PitchCorrectionQuality } from './AV';\n\nexport type AudioMode = {\n  allowsRecordingIOS: boolean;\n  interruptionModeIOS: number;\n  playsInSilentModeIOS: boolean;\n  staysActiveInBackground: boolean;\n  interruptionModeAndroid: number;\n  shouldDuckAndroid: boolean;\n  playThroughEarpieceAndroid: boolean;\n};\n\nexport const INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = 0;\nexport const INTERRUPTION_MODE_IOS_DO_NOT_MIX = 1;\nexport const INTERRUPTION_MODE_IOS_DUCK_OTHERS = 2;\n\nexport const INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = 1;\nexport const INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = 2;\n\n// Returns true if value is in validValues, and false if not.\nconst _isValueValid = (value: any, validValues: any[]): boolean => {\n  return validValues.filter(validValue => validValue === value).length > 0;\n};\n\nconst _populateMissingKeys = (\n  userAudioMode: Partial<AudioMode>,\n  defaultAudioMode: AudioMode\n): AudioMode => {\n  for (const key in defaultAudioMode) {\n    if (!userAudioMode.hasOwnProperty(key)) {\n      userAudioMode[key] = defaultAudioMode[key];\n    }\n  }\n  return userAudioMode as AudioMode;\n};\n\nconst defaultMode: AudioMode = {\n  allowsRecordingIOS: false,\n  interruptionModeIOS: INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,\n  playsInSilentModeIOS: false,\n  staysActiveInBackground: false,\n  interruptionModeAndroid: INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n  shouldDuckAndroid: true,\n  playThroughEarpieceAndroid: false,\n};\n\nlet currentAudioMode: AudioMode | null = null;\n\nfunction getCurrentAudioMode(): AudioMode {\n  if (!currentAudioMode) {\n    return defaultMode;\n  }\n  return currentAudioMode;\n}\n\nexport async function setAudioModeAsync(partialMode: Partial<AudioMode>): Promise<void> {\n  const mode = _populateMissingKeys(partialMode, getCurrentAudioMode());\n\n  if (\n    !_isValueValid(mode.interruptionModeIOS, [\n      INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,\n      INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n      INTERRUPTION_MODE_IOS_DUCK_OTHERS,\n    ])\n  ) {\n    throw new Error(`\"interruptionModeIOS\" was set to an invalid value.`);\n  }\n  if (\n    !_isValueValid(mode.interruptionModeAndroid, [\n      INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\n      INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n    ])\n  ) {\n    throw new Error(`\"interruptionModeAndroid\" was set to an invalid value.`);\n  }\n  if (\n    typeof mode.allowsRecordingIOS !== 'boolean' ||\n    typeof mode.playsInSilentModeIOS !== 'boolean' ||\n    typeof mode.staysActiveInBackground !== 'boolean' ||\n    typeof mode.shouldDuckAndroid !== 'boolean' ||\n    typeof mode.playThroughEarpieceAndroid !== 'boolean'\n  ) {\n    throw new Error(\n      '\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.'\n    );\n  }\n  currentAudioMode = mode;\n  return await ExponentAV.setAudioMode(mode);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}