{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import React,{useState}from\"react\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import SafeAreaView from\"react-native-web/dist/exports/SafeAreaView\";import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import{BarCodeScanner}from\"expo-barcode-scanner\";import Constants from\"expo-constants\";import ScannerView from\"./ScannerView\";export default function ScanQrCode(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),scanned=_useState2[0],setScanned=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),hasPermission=_useState4[0],setHasPermission=_useState4[1];var startScan=function startScan(){setScanned(false);if(!hasPermission){(function _callee(){var _await$BarCodeScanner,status;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());case 2:_await$BarCodeScanner=_context.sent;status=_await$BarCodeScanner.status;setHasPermission(status===\"granted\");case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);})();}};var handleBarCodeScanned=function handleBarCodeScanned(_ref){var data=_ref.data;setScanned(true);alert(\"Scanned QR code with data: \\\"\"+data+\"\\\"\");};return React.createElement(SafeAreaView,{style:styles.container},!scanned&&hasPermission&&React.createElement(View,{style:{flex:1}},React.createElement(BarCodeScanner,{style:StyleSheet.absoluteFillObject,onBarCodeScanned:handleBarCodeScanned,barCodeTypes:[BarCodeScanner.Constants.BarCodeType.qr]}),React.createElement(View,{style:styles.helpTextWrapper},React.createElement(Text,{style:styles.helpText},\"Find QR Code to scan\"))),React.createElement(View,{style:styles.content},scanned!==null&&hasPermission===null&&React.createElement(Text,{style:styles.helpText},\"Requesting for camera permission\"),scanned!==null&&hasPermission===false&&React.createElement(Text,{style:styles.helpText},\"No access to camera\"),scanned===false&&hasPermission&&React.createElement(ScannerView,{scanned:scanned}),scanned!==false&&React.createElement(TouchableOpacity,{style:styles.button,onPress:startScan},React.createElement(Text,{style:styles.buttonText},scanned===null?\"Scan now\":\"Scan again\"))));}var styles=StyleSheet.create({container:{flex:1,paddingTop:Constants.statusBarHeight,backgroundColor:\"#000\"},content:_objectSpread(_objectSpread({},StyleSheet.absoluteFillObject),{},{justifyContent:\"center\",alignItems:\"center\"}),helpTextWrapper:{position:\"absolute\",bottom:0,left:0,right:0,padding:15,alignItems:\"center\",backgroundColor:\"rgba(0,0,0,0.6)\"},helpText:{color:\"#fff\"},button:{paddingVertical:15,paddingHorizontal:30,borderRadius:10,backgroundColor:\"#303940\"},buttonText:{color:\"#fff\"}});","map":{"version":3,"sources":["/app/examples/7-scan-qr-code/ScanQrCode.js"],"names":["React","useState","BarCodeScanner","Constants","ScannerView","ScanQrCode","scanned","setScanned","hasPermission","setHasPermission","startScan","requestPermissionsAsync","status","handleBarCodeScanned","data","alert","styles","container","flex","StyleSheet","absoluteFillObject","BarCodeType","qr","helpTextWrapper","helpText","content","button","buttonText","create","paddingTop","statusBarHeight","backgroundColor","justifyContent","alignItems","position","bottom","left","right","padding","color","paddingVertical","paddingHorizontal","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  SafeAreaView,\n  View,\n  Text,\n  TouchableOpacity,\n} from \"react-native\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nimport Constants from \"expo-constants\";\nimport ScannerView from \"./ScannerView\";\n\nexport default function ScanQrCode() {\n  const [scanned, setScanned] = useState(null);\n  const [hasPermission, setHasPermission] = useState(null);\n  \n  const startScan = () => {\n    setScanned(false);\n\n    // Request camera permission\n    if (!hasPermission) {\n      (async () => {\n        const { status } = await BarCodeScanner.requestPermissionsAsync();\n        setHasPermission(status === \"granted\");\n      })();\n    }\n  };\n\n  const handleBarCodeScanned = ({ data }) => {\n    setScanned(true);\n    alert(`Scanned QR code with data: \"${data}\"`);\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {!scanned && hasPermission && (\n        <View style={{ flex: 1 }}>\n          {/* https://docs.expo.io/versions/latest/sdk/bar-code-scanner/ */}\n          <BarCodeScanner\n            style={StyleSheet.absoluteFillObject}\n            onBarCodeScanned={handleBarCodeScanned}\n            barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}\n          />\n\n          <View style={styles.helpTextWrapper}>\n            <Text style={styles.helpText}>Find QR Code to scan</Text>\n          </View>\n        </View>\n      )}\n\n      <View style={styles.content}>\n        {scanned !== null && hasPermission === null && (\n          <Text style={styles.helpText}>Requesting for camera permission</Text>\n        )}\n\n        {scanned !== null && hasPermission === false && (\n          <Text style={styles.helpText}>No access to camera</Text>\n        )}\n\n        {scanned === false && hasPermission && (\n          <ScannerView scanned={scanned} />\n        )}\n\n        {(scanned !== false) && (\n          <TouchableOpacity style={styles.button} onPress={startScan}>\n            <Text style={styles.buttonText}>\n              {scanned === null ? \"Scan now\" : \"Scan again\"}\n            </Text>\n          </TouchableOpacity>\n        )}\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: \"#000\",\n  },\n  content: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  helpTextWrapper: {\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    padding: 15,\n    alignItems: \"center\",\n    backgroundColor: \"rgba(0,0,0,0.6)\",\n  },\n  helpText: {\n    color: \"#fff\",\n  },\n  button: {\n    paddingVertical: 15,\n    paddingHorizontal: 30,\n    borderRadius: 10,\n    backgroundColor: \"#303940\",\n  },\n  buttonText: {\n    color: \"#fff\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}