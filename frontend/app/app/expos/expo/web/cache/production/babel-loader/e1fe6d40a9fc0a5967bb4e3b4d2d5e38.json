{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useEffect,useState}from\"react\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import Image from\"react-native-web/dist/exports/Image\";import FlatList from\"react-native-web/dist/exports/FlatList\";import ActivityIndicator from\"react-native-web/dist/exports/ActivityIndicator\";import Alert from\"react-native-web/dist/exports/Alert\";import{ListItem,SearchBar}from\"react-native-elements\";import{uniqBy}from\"lodash\";import MainHeader from\"../components/MainHeader\";import{FullMovesAPI}from\"../constants\";import{PokemonTypeIcon}from\"../constants\";export default function MoveList(_ref){var navigation=_ref.navigation;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),displayMoves=_useState2[0],setDisplayMoves=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),moves=_useState4[0],setMoves=_useState4[1];var _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),isLoading=_useState6[0],setLoading=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),keyword=_useState8[0],setKeyword=_useState8[1];var renderItem=function renderItem(_ref2){var item=_ref2.item,index=_ref2.index;return React.createElement(ListItem,{containerStyle:styles.listItem,onPress:function onPress(){navigation.navigate(\"MoveDetail\",{move:moves[index]});}},React.createElement(ListItem.Content,null,React.createElement(ListItem.Title,null,item.title)),React.createElement(View,{style:{flexDirection:\"row\"}},React.createElement(Image,{source:PokemonTypeIcon[item.move_type.toLowerCase()]})));};var searchMove=function searchMove(keyword){setKeyword(keyword);if(keyword==\"\"){setDisplayMoves(moves);}else{var filteredMoves=moves.filter(function(move){return move.title.toLowerCase().includes(keyword.toLowerCase());});setDisplayMoves(filteredMoves);}};useEffect(function(){var fetchData=function fetchData(url){var response,responseJson,removeDuplicated;return _regeneratorRuntime.async(function fetchData$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return _regeneratorRuntime.awrap(fetch(url));case 3:response=_context.sent;_context.next=6;return _regeneratorRuntime.awrap(response.json());case 6:responseJson=_context.sent;removeDuplicated=uniqBy(responseJson,\"nid\");setMoves(removeDuplicated);setDisplayMoves(removeDuplicated);setKeyword(\"\");setLoading(false);_context.next=17;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](0);Alert.alert(\"Cannot connect to Server!\");case 17:case\"end\":return _context.stop();}}},null,null,[[0,14]],Promise);};fetchData(FullMovesAPI);},[]);return React.createElement(View,{style:{flex:1}},React.createElement(MainHeader,{title:\"Moves\",isMain:true,navigation:navigation}),React.createElement(SearchBar,{placeholder:\"Find Move by name ...\",inputContainerStyle:{backgroundColor:\"#e9e9e9\"},containerStyle:{backgroundColor:\"transparent\"},lightTheme:true,round:true,value:keyword,onChangeText:searchMove}),!isLoading?React.createElement(FlatList,{data:displayMoves,renderItem:renderItem,keyExtractor:function keyExtractor(item){return item.nid;},initialNumToRender:10}):React.createElement(ActivityIndicator,{animating:true,size:\"large\"}));}var styles=StyleSheet.create({listItem:{borderBottomWidth:1,borderBottomColor:\"#ddd\"}});","map":{"version":3,"sources":["/app/examples/12-pokedex/screens/MoveList.js"],"names":["React","useEffect","useState","ListItem","SearchBar","uniqBy","MainHeader","FullMovesAPI","PokemonTypeIcon","MoveList","navigation","displayMoves","setDisplayMoves","moves","setMoves","isLoading","setLoading","keyword","setKeyword","renderItem","item","index","styles","listItem","navigate","move","title","flexDirection","move_type","toLowerCase","searchMove","filteredMoves","filter","includes","fetchData","url","fetch","response","json","responseJson","removeDuplicated","Alert","alert","flex","backgroundColor","nid","StyleSheet","create","borderBottomWidth","borderBottomColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  View,\n  Image,\n  FlatList,\n  ActivityIndicator,\n  Alert,\n} from \"react-native\";\nimport { ListItem, SearchBar } from \"react-native-elements\";\nimport { uniqBy } from \"lodash\";\n\nimport MainHeader from \"../components/MainHeader\";\nimport { FullMovesAPI } from \"../constants\";\nimport { PokemonTypeIcon } from \"../constants\";\n\nexport default function MoveList({ navigation }) {\n  const [displayMoves, setDisplayMoves] = useState([]);\n  const [moves, setMoves] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  const [keyword, setKeyword] = useState(\"\");\n\n  const renderItem = ({ item, index }) => {\n    return (\n      <ListItem\n        containerStyle={styles.listItem}\n        onPress={() => {\n          navigation.navigate(\"MoveDetail\", {\n            move: moves[index],\n          });\n        }}\n      >\n        <ListItem.Content>\n          <ListItem.Title>{item.title}</ListItem.Title>\n        </ListItem.Content>\n\n        <View style={{ flexDirection: \"row\" }}>\n          <Image source={PokemonTypeIcon[item.move_type.toLowerCase()]} />\n        </View>\n      </ListItem>\n    );\n  };\n\n  const searchMove = (keyword) => {\n    setKeyword(keyword);\n\n    if (keyword == \"\") {\n      setDisplayMoves(moves);\n    } else {\n      const filteredMoves = moves.filter((move) => {\n        return move.title.toLowerCase().includes(keyword.toLowerCase());\n      });\n      setDisplayMoves(filteredMoves);\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async (url) => {\n      try {\n        const response = await fetch(url);\n        const responseJson = await response.json();\n        const removeDuplicated = uniqBy(responseJson, \"nid\");\n\n        setMoves(removeDuplicated);\n        setDisplayMoves(removeDuplicated);\n        setKeyword(\"\");\n        setLoading(false);\n      } catch (error) {\n        Alert.alert(\"Cannot connect to Server!\");\n      }\n    };\n\n    fetchData(FullMovesAPI);\n  }, []);\n\n  return (\n    <View style={{ flex: 1 }}>\n      <MainHeader title=\"Moves\" isMain={true} navigation={navigation} />\n\n      <SearchBar\n        placeholder=\"Find Move by name ...\"\n        inputContainerStyle={{ backgroundColor: \"#e9e9e9\" }}\n        containerStyle={{ backgroundColor: \"transparent\" }}\n        lightTheme={true}\n        round={true}\n        value={keyword}\n        onChangeText={searchMove}\n      />\n\n      {!isLoading ? (\n        <FlatList\n          data={displayMoves}\n          renderItem={renderItem}\n          keyExtractor={(item) => item.nid}\n          initialNumToRender={10}\n        />\n      ) : (\n        <ActivityIndicator animating size=\"large\" />\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  listItem: {\n    borderBottomWidth: 1,\n    borderBottomColor: \"#ddd\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}