{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _ from 'lodash';\nimport XDate from 'xdate';\nimport { sameMonth } from \"../../dateutils\";\nimport { xdateToData, toMarkingFormat } from \"../../interface\";\n\nvar commons = require(\"../commons\");\n\nvar TOP_POSITION = 65;\n\nvar Presenter = function () {\n  function Presenter() {\n    var _this = this;\n\n    _classCallCheck(this, Presenter);\n\n    this._getIconDown = function () {\n      return require(\"../../img/down.png\");\n    };\n\n    this._getIconUp = function () {\n      return require(\"../../img/up.png\");\n    };\n\n    this.getButtonIcon = function (date) {\n      var showTodayButton = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!showTodayButton) {\n        return undefined;\n      }\n\n      var icon = _this._isPastDate(date) ? _this._getIconDown() : _this._getIconUp();\n      return icon;\n    };\n\n    this.setDate = function (props, date, newDate, updateState, updateSource) {\n      var isSameMonth = sameMonth(new XDate(date), new XDate(newDate));\n\n      var buttonIcon = _this.getButtonIcon(date, props.showTodayButton);\n\n      updateState(buttonIcon);\n\n      _.invoke(props, 'onDateChanged', date, updateSource);\n\n      if (!isSameMonth) {\n        _.invoke(props, 'onMonthChange', xdateToData(new XDate(date)), updateSource);\n      }\n    };\n\n    this.setDisabled = function (showTodayButton, newDisabledValue, oldDisabledValue, updateState) {\n      if (!showTodayButton || newDisabledValue === oldDisabledValue) {\n        return;\n      }\n\n      updateState(newDisabledValue);\n    };\n\n    this.shouldAnimateTodayButton = function (props) {\n      return props.showTodayButton;\n    };\n\n    this._isToday = function (date) {\n      var today = toMarkingFormat(new XDate());\n      return today === date;\n    };\n\n    this.getTodayDate = function () {\n      return toMarkingFormat(new XDate());\n    };\n\n    this.getPositionAnimation = function (date) {\n      var todayBottomMargin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var toValue = _this._isToday(date) ? TOP_POSITION : -todayBottomMargin || -TOP_POSITION;\n      return {\n        toValue: toValue,\n        tension: 30,\n        friction: 8,\n        useNativeDriver: true\n      };\n    };\n\n    this.shouldAnimateOpacity = function (props) {\n      return props.disabledOpacity;\n    };\n\n    this.getOpacityAnimation = function (_ref, disabled) {\n      var _ref$disabledOpacity = _ref.disabledOpacity,\n          disabledOpacity = _ref$disabledOpacity === void 0 ? 0 : _ref$disabledOpacity;\n      return {\n        toValue: disabled ? disabledOpacity : 1,\n        duration: 500,\n        useNativeDriver: true\n      };\n    };\n\n    this.getTodayFormatted = function () {\n      var todayString = XDate.locales[XDate.defaultLocale].today || commons.todayString;\n      var today = todayString.charAt(0).toUpperCase() + todayString.slice(1);\n      return today;\n    };\n  }\n\n  _createClass(Presenter, [{\n    key: \"_isPastDate\",\n    value: function _isPastDate(date) {\n      var today = new XDate();\n      var d = new XDate(date);\n\n      if (today.getFullYear() > d.getFullYear()) {\n        return true;\n      }\n\n      if (today.getFullYear() === d.getFullYear()) {\n        if (today.getMonth() > d.getMonth()) {\n          return true;\n        }\n\n        if (today.getMonth() === d.getMonth()) {\n          if (today.getDate() > d.getDate()) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return Presenter;\n}();\n\nexport default Presenter;","map":{"version":3,"sources":["/app/node_modules/react-native-calendars/src/expandableCalendar/Context/Presenter.js"],"names":["_","XDate","sameMonth","xdateToData","toMarkingFormat","commons","require","TOP_POSITION","Presenter","_getIconDown","_getIconUp","getButtonIcon","date","showTodayButton","undefined","icon","_isPastDate","setDate","props","newDate","updateState","updateSource","isSameMonth","buttonIcon","invoke","setDisabled","newDisabledValue","oldDisabledValue","shouldAnimateTodayButton","_isToday","today","getTodayDate","getPositionAnimation","todayBottomMargin","toValue","tension","friction","useNativeDriver","shouldAnimateOpacity","disabledOpacity","getOpacityAnimation","disabled","duration","getTodayFormatted","todayString","locales","defaultLocale","charAt","toUpperCase","slice","d","getFullYear","getMonth","getDate"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport XDate from 'xdate';\n// @ts-expect-error\nimport { sameMonth } from '../../dateutils';\n// @ts-expect-error\nimport { xdateToData, toMarkingFormat } from '../../interface';\nconst commons = require('../commons');\nconst TOP_POSITION = 65;\nclass Presenter {\n    _isPastDate(date) {\n        const today = new XDate();\n        const d = new XDate(date);\n        if (today.getFullYear() > d.getFullYear()) {\n            return true;\n        }\n        if (today.getFullYear() === d.getFullYear()) {\n            if (today.getMonth() > d.getMonth()) {\n                return true;\n            }\n            if (today.getMonth() === d.getMonth()) {\n                if (today.getDate() > d.getDate()) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    _getIconDown = () => {\n        return require('../../img/down.png');\n    };\n    _getIconUp = () => {\n        return require('../../img/up.png');\n    };\n    getButtonIcon = (date, showTodayButton = true) => {\n        if (!showTodayButton) {\n            return undefined;\n        }\n        const icon = this._isPastDate(date) ? this._getIconDown() : this._getIconUp();\n        return icon;\n    };\n    setDate = (props, date, newDate, updateState, updateSource) => {\n        const isSameMonth = sameMonth(new XDate(date), new XDate(newDate));\n        const buttonIcon = this.getButtonIcon(date, props.showTodayButton);\n        updateState(buttonIcon);\n        _.invoke(props, 'onDateChanged', date, updateSource);\n        if (!isSameMonth) {\n            _.invoke(props, 'onMonthChange', xdateToData(new XDate(date)), updateSource);\n        }\n    };\n    setDisabled = (showTodayButton, newDisabledValue, oldDisabledValue, updateState) => {\n        if (!showTodayButton || newDisabledValue === oldDisabledValue) {\n            return;\n        }\n        updateState(newDisabledValue);\n    };\n    shouldAnimateTodayButton = (props) => {\n        return props.showTodayButton;\n    };\n    _isToday = (date) => {\n        const today = toMarkingFormat(new XDate());\n        return today === date;\n    };\n    getTodayDate = () => {\n        return toMarkingFormat(new XDate());\n    };\n    getPositionAnimation = (date, todayBottomMargin = 0) => {\n        const toValue = this._isToday(date) ? TOP_POSITION : -todayBottomMargin || -TOP_POSITION;\n        return {\n            toValue,\n            tension: 30,\n            friction: 8,\n            useNativeDriver: true\n        };\n    };\n    shouldAnimateOpacity = (props) => {\n        return props.disabledOpacity;\n    };\n    getOpacityAnimation = ({ disabledOpacity = 0 }, disabled) => {\n        return {\n            toValue: disabled ? disabledOpacity : 1,\n            duration: 500,\n            useNativeDriver: true\n        };\n    };\n    getTodayFormatted = () => {\n        // @ts-expect-error\n        const todayString = XDate.locales[XDate.defaultLocale].today || commons.todayString;\n        const today = todayString.charAt(0).toUpperCase() + todayString.slice(1);\n        return today;\n    };\n}\nexport default Presenter;\n"]},"metadata":{},"sourceType":"module"}