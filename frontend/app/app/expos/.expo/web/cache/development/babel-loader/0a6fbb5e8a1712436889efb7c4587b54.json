{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lookupRecord = _interopRequireDefault(require(\"../helpers/lookupRecord\"));\n\nvar _BRRenderer = _interopRequireDefault(require(\"../renderers/BRRenderer\"));\n\nvar _WBRRenderer = _interopRequireDefault(require(\"../renderers/WBRRenderer\"));\n\nvar _internalRenderers = _interopRequireDefault(require(\"./internalRenderers\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar internalTextRenderers = {\n  br: _BRRenderer.default,\n  wbr: _WBRRenderer.default\n};\n\nvar RenderRegistry = function () {\n  function RenderRegistry() {\n    var customRenderers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var elementModels = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, RenderRegistry);\n\n    _defineProperty(this, \"customRenderers\", {});\n\n    _defineProperty(this, \"elementModels\", void 0);\n\n    this.customRenderers = customRenderers;\n    this.elementModels = elementModels;\n  }\n\n  _createClass(RenderRegistry, [{\n    key: \"getInternalTextRenderer\",\n    value: function getInternalTextRenderer(tagName) {\n      if ((0, _lookupRecord.default)(internalTextRenderers, tagName)) {\n        return internalTextRenderers[tagName];\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getRendererConfigForTNode\",\n    value: function getRendererConfigForTNode(tnode) {\n      return {\n        Custom: this.getCustomRendererForTNode(tnode),\n        Default: this.getDefaultRendererForTNode(tnode)\n      };\n    }\n  }, {\n    key: \"getDefaultRendererForTNode\",\n    value: function getDefaultRendererForTNode(tnode) {\n      if (tnode.tagName in _internalRenderers.default) {\n        return _internalRenderers.default[tnode.tagName];\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getCustomRendererForTNode\",\n    value: function getCustomRendererForTNode(tnode) {\n      if (tnode.tagName in this.customRenderers) {\n        var renderer = this.customRenderers[tnode.tagName];\n\n        if (__DEV__) {\n          var elementModel = this.elementModels[tnode.tagName];\n\n          if (!elementModel) {\n            console.warn(\"You are attempting to render a \" + tnode.tagName + \" tag but you didn't provide an HTMLElementModel. Make sure you register a model for this tag in \\\"customHTMLElementModels\\\" prop. \");\n          } else if (!tnode.matchContentModel(elementModel.contentModel)) {\n            console.warn(\"You are attempting to render \\\"\" + tnode.tagName + \"\\\" of type \\\"\" + tnode.displayName + \"\\\", but the registered renderer is of content model type \" + (elementModel === null || elementModel === void 0 ? void 0 : elementModel.contentModel) + \" which is incompatible with \\\"\" + tnode.displayName + \"\\\".\");\n          }\n        }\n\n        return renderer;\n      }\n\n      return null;\n    }\n  }]);\n\n  return RenderRegistry;\n}();\n\nexports.default = RenderRegistry;","map":{"version":3,"sources":["RenderRegistry.ts"],"names":["internalTextRenderers","br","BRRenderer","wbr","WBRRenderer","constructor","customRenderers","Custom","Default","tnode","internalRenderers","renderer","elementModel","console","tagName","displayName","contentModel"],"mappings":";;;;;;;;;;;AAGA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,2BAAA,CAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,2BAAA,CAAA;;AACA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,4BAAA,CAAA;;AAMA,IAAA,kBAAA,GAAA,sBAAA,CAAA,OAAA,uBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAMA,qBAAkE,GAAG;AACzEC,EAAAA,EAAE,EAAEC,WAAAA,CADqE,OAAA;AAEzEC,EAAAA,GAAG,EAAEC,YAAAA,CAAAA;AAFoE,CAA3E;;IAUe,c;AAIbC,4BAGE;AAAA,QAFAC,eAEA,uEAHS,EAGT;AAAA,QAHS,aAGT;;AAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAN0D,EAM1D,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA;;AACA,SAAA,eAAA,GAAA,eAAA;AACA,SAAA,aAAA,GAAA,aAAA;AACD;;;;4CAEsB,O,EAAyB;AAC9C,UAAI,CAAA,GAAA,aAAA,CAAA,OAAA,EAAA,qBAAA,EAAJ,OAAI,CAAJ,EAAkD;AAChD,eAAON,qBAAqB,CAA5B,OAA4B,CAA5B;AACD;;AACD,aAAA,IAAA;AACD;;;8CAEwB,K,EAA+C;AACtE,aAAO;AACLO,QAAAA,MAAM,EAAE,KAAA,yBAAA,CADH,KACG,CADH;AAELC,QAAAA,OAAO,EAAE,KAAA,0BAAA,CAAA,KAAA;AAFJ,OAAP;AAID;;;+CAEiC,K,EAEJ;AAC5B,UAAIC,KAAK,CAALA,OAAAA,IAAkBC,kBAAAA,CAAtB,OAAA,EAAyC;AAEvC,eAAOA,kBAAAA,CAAAA,OAAAA,CAAkBD,KAAK,CAA9B,OAAOC,CAAP;AACD;;AACD,aAAA,IAAA;AACD;;;8CAEgC,K,EAEe;AAC9C,UAAID,KAAK,CAALA,OAAAA,IAAkB,KAAtB,eAAA,EAA4C;AAC1C,YAAME,QAAQ,GAAG,KAAA,eAAA,CAAqBF,KAAK,CAA3C,OAAiB,CAAjB;;AAEA,YAAA,OAAA,EAAa;AAEX,cAAMG,YAAY,GAAG,KAAA,aAAA,CAAmBH,KAAK,CAA7C,OAAqB,CAArB;;AACA,cAAI,CAAJ,YAAA,EAAmB;AACjBI,YAAAA,OAAO,CAAPA,IAAAA,qCACoCJ,KAAK,CADzCI,OAAAA;AADF,WAAA,MAIO,IAAI,CAACJ,KAAK,CAALA,iBAAAA,CAAwBG,YAAY,CAAzC,YAAKH,CAAL,EAAyD;AAC9DI,YAAAA,OAAO,CAAPA,IAAAA,qCACmCJ,KAAK,CAACK,OADzCD,qBAC8DJ,KAAK,CAACM,WADpEF,kEAC0ID,YAAxI,KAAA,IAAwIA,IAAAA,YAAxI,KAAA,KAAA,CAAwIA,GAAxI,KAAA,CAAwIA,GAAAA,YAAY,CAAEI,YADxJH,uCACoMJ,KAAK,CADzMI,WAAAA;AAGD;AACF;;AACD,eAAA,QAAA;AACD;;AACD,aAAA,IAAA;AACD","sourcesContent":["import { TNode } from '@native-html/transient-render-engine';\nimport { ComponentType } from 'react';\nimport { CustomRendererProps } from '..';\nimport lookupRecord from '../helpers/lookupRecord';\nimport BRRenderer from '../renderers/BRRenderer';\nimport WBRRenderer from '../renderers/WBRRenderer';\nimport {\n  CustomRenderer,\n  HTMLElementModelRecord,\n  InternalRenderer\n} from '../shared-types';\nimport internalRenderers from './internalRenderers';\nimport {\n  CustomTagRendererRecord,\n  InternalTextContentRenderer\n} from './render-types';\n\nconst internalTextRenderers: Record<string, InternalTextContentRenderer> = {\n  br: BRRenderer,\n  wbr: WBRRenderer\n};\n\nexport interface RendererConfig<T extends TNode> {\n  Default: InternalRenderer<T> | null;\n  Custom: CustomRenderer<T> | null;\n}\n\nexport default class RenderRegistry {\n  private readonly customRenderers: CustomTagRendererRecord = {};\n  private readonly elementModels: HTMLElementModelRecord;\n\n  constructor(\n    customRenderers: CustomTagRendererRecord = {},\n    elementModels: HTMLElementModelRecord\n  ) {\n    this.customRenderers = customRenderers;\n    this.elementModels = elementModels;\n  }\n\n  getInternalTextRenderer(tagName: string | null) {\n    if (lookupRecord(internalTextRenderers, tagName)) {\n      return internalTextRenderers[tagName];\n    }\n    return null;\n  }\n\n  getRendererConfigForTNode<T extends TNode>(tnode: T): RendererConfig<T> {\n    return {\n      Custom: this.getCustomRendererForTNode(tnode),\n      Default: this.getDefaultRendererForTNode(tnode)\n    };\n  }\n\n  private getDefaultRendererForTNode<T extends TNode>(\n    tnode: T\n  ): InternalRenderer<T> | null {\n    if (tnode.tagName! in internalRenderers) {\n      //@ts-ignore\n      return internalRenderers[tnode.tagName!];\n    }\n    return null;\n  }\n\n  private getCustomRendererForTNode<T extends TNode>(\n    tnode: T\n  ): ComponentType<CustomRendererProps<T>> | null {\n    if (tnode.tagName! in this.customRenderers) {\n      const renderer = this.customRenderers[tnode.tagName!];\n      /* istanbul ignore next */\n      if (__DEV__) {\n        // In DEV, check for discrepancies.\n        const elementModel = this.elementModels[tnode.tagName!];\n        if (!elementModel) {\n          console.warn(\n            `You are attempting to render a ${tnode.tagName!} tag but you didn't provide an HTMLElementModel. Make sure you register a model for this tag in \"customHTMLElementModels\" prop. `\n          );\n        } else if (!tnode.matchContentModel(elementModel.contentModel)) {\n          console.warn(\n            `You are attempting to render \"${tnode.tagName}\" of type \"${tnode.displayName}\", but the registered renderer is of content model type ${elementModel?.contentModel} which is incompatible with \"${tnode.displayName}\".`\n          );\n        }\n      }\n      return renderer as any;\n    }\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}