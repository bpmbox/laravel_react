{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/app/examples/12-pokedex/screens/MoveList.js\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { ListItem, SearchBar } from \"react-native-elements\";\nimport { uniqBy } from \"lodash\";\nimport MainHeader from \"../components/MainHeader\";\nimport { FullMovesAPI } from \"../constants\";\nimport { PokemonTypeIcon } from \"../constants\";\nexport default function MoveList(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      displayMoves = _useState2[0],\n      setDisplayMoves = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      moves = _useState4[0],\n      setMoves = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      keyword = _useState8[0],\n      setKeyword = _useState8[1];\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item,\n        index = _ref2.index;\n    return React.createElement(ListItem, {\n      containerStyle: styles.listItem,\n      onPress: function onPress() {\n        navigation.navigate(\"MoveDetail\", {\n          move: moves[index]\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, React.createElement(ListItem.Content, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, React.createElement(ListItem.Title, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }\n    }, item.title)), React.createElement(View, {\n      style: {\n        flexDirection: \"row\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, React.createElement(Image, {\n      source: PokemonTypeIcon[item.move_type.toLowerCase()],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  var searchMove = function searchMove(keyword) {\n    setKeyword(keyword);\n\n    if (keyword == \"\") {\n      setDisplayMoves(moves);\n    } else {\n      var filteredMoves = moves.filter(function (move) {\n        return move.title.toLowerCase().includes(keyword.toLowerCase());\n      });\n      setDisplayMoves(filteredMoves);\n    }\n  };\n\n  useEffect(function () {\n    var fetchData = function fetchData(url) {\n      var response, responseJson, removeDuplicated;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch(url));\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 6:\n              responseJson = _context.sent;\n              removeDuplicated = uniqBy(responseJson, \"nid\");\n              setMoves(removeDuplicated);\n              setDisplayMoves(removeDuplicated);\n              setKeyword(\"\");\n              setLoading(false);\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](0);\n              Alert.alert(\"Cannot connect to Server!\");\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 14]], Promise);\n    };\n\n    fetchData(FullMovesAPI);\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, React.createElement(MainHeader, {\n    title: \"Moves\",\n    isMain: true,\n    navigation: navigation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), React.createElement(SearchBar, {\n    placeholder: \"Find Move by name ...\",\n    inputContainerStyle: {\n      backgroundColor: \"#e9e9e9\"\n    },\n    containerStyle: {\n      backgroundColor: \"transparent\"\n    },\n    lightTheme: true,\n    round: true,\n    value: keyword,\n    onChangeText: searchMove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), !isLoading ? React.createElement(FlatList, {\n    data: displayMoves,\n    renderItem: renderItem,\n    keyExtractor: function keyExtractor(item) {\n      return item.nid;\n    },\n    initialNumToRender: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }) : React.createElement(ActivityIndicator, {\n    animating: true,\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  listItem: {\n    borderBottomWidth: 1,\n    borderBottomColor: \"#ddd\"\n  }\n});","map":{"version":3,"sources":["/app/examples/12-pokedex/screens/MoveList.js"],"names":["React","useEffect","useState","ListItem","SearchBar","uniqBy","MainHeader","FullMovesAPI","PokemonTypeIcon","MoveList","navigation","displayMoves","setDisplayMoves","moves","setMoves","isLoading","setLoading","keyword","setKeyword","renderItem","item","index","styles","listItem","navigate","move","title","flexDirection","move_type","toLowerCase","searchMove","filteredMoves","filter","includes","fetchData","url","fetch","response","json","responseJson","removeDuplicated","Alert","alert","flex","backgroundColor","nid","StyleSheet","create","borderBottomWidth","borderBottomColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  View,\n  Image,\n  FlatList,\n  ActivityIndicator,\n  Alert,\n} from \"react-native\";\nimport { ListItem, SearchBar } from \"react-native-elements\";\nimport { uniqBy } from \"lodash\";\n\nimport MainHeader from \"../components/MainHeader\";\nimport { FullMovesAPI } from \"../constants\";\nimport { PokemonTypeIcon } from \"../constants\";\n\nexport default function MoveList({ navigation }) {\n  const [displayMoves, setDisplayMoves] = useState([]);\n  const [moves, setMoves] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  const [keyword, setKeyword] = useState(\"\");\n\n  const renderItem = ({ item, index }) => {\n    return (\n      <ListItem\n        containerStyle={styles.listItem}\n        onPress={() => {\n          navigation.navigate(\"MoveDetail\", {\n            move: moves[index],\n          });\n        }}\n      >\n        <ListItem.Content>\n          <ListItem.Title>{item.title}</ListItem.Title>\n        </ListItem.Content>\n\n        <View style={{ flexDirection: \"row\" }}>\n          <Image source={PokemonTypeIcon[item.move_type.toLowerCase()]} />\n        </View>\n      </ListItem>\n    );\n  };\n\n  const searchMove = (keyword) => {\n    setKeyword(keyword);\n\n    if (keyword == \"\") {\n      setDisplayMoves(moves);\n    } else {\n      const filteredMoves = moves.filter((move) => {\n        return move.title.toLowerCase().includes(keyword.toLowerCase());\n      });\n      setDisplayMoves(filteredMoves);\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async (url) => {\n      try {\n        const response = await fetch(url);\n        const responseJson = await response.json();\n        const removeDuplicated = uniqBy(responseJson, \"nid\");\n\n        setMoves(removeDuplicated);\n        setDisplayMoves(removeDuplicated);\n        setKeyword(\"\");\n        setLoading(false);\n      } catch (error) {\n        Alert.alert(\"Cannot connect to Server!\");\n      }\n    };\n\n    fetchData(FullMovesAPI);\n  }, []);\n\n  return (\n    <View style={{ flex: 1 }}>\n      <MainHeader title=\"Moves\" isMain={true} navigation={navigation} />\n\n      <SearchBar\n        placeholder=\"Find Move by name ...\"\n        inputContainerStyle={{ backgroundColor: \"#e9e9e9\" }}\n        containerStyle={{ backgroundColor: \"transparent\" }}\n        lightTheme={true}\n        round={true}\n        value={keyword}\n        onChangeText={searchMove}\n      />\n\n      {!isLoading ? (\n        <FlatList\n          data={displayMoves}\n          renderItem={renderItem}\n          keyExtractor={(item) => item.nid}\n          initialNumToRender={10}\n        />\n      ) : (\n        <ActivityIndicator animating size=\"large\" />\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  listItem: {\n    borderBottomWidth: 1,\n    borderBottomColor: \"#ddd\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}