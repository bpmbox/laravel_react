{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/app/node_modules/react-native-calendars/src/calendar/day/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport XDate from 'xdate';\nimport memoize from 'memoize-one';\nimport React, { Component } from 'react';\nimport { shouldUpdate } from \"../../component-updater\";\nimport { isToday as dateutils_isToday } from \"../../dateutils\";\nimport { xdateToData } from \"../../interface\";\nimport { SELECT_DATE_SLOT } from \"../../testIDs\";\nimport BasicDay from \"./basic\";\nimport PeriodDay from \"./period\";\n\nvar basicDayPropsTypes = _.omit(BasicDay.propTypes, 'date');\n\nvar Day = function (_Component) {\n  _inherits(Day, _Component);\n\n  var _super = _createSuper(Day);\n\n  function Day() {\n    var _this;\n\n    _classCallCheck(this, Day);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.getAccessibilityLabel = memoize(function (day, marking, isToday) {\n      var today = _.get(XDate, 'locales[XDate.defaultLocale].today');\n\n      var formatAccessibilityLabel = _.get(XDate, 'locales[XDate.defaultLocale].formatAccessibilityLabel');\n\n      var markingLabel = _this.getMarkingLabel(marking);\n\n      if (formatAccessibilityLabel) {\n        return (isToday ? today : '') + \" \" + day.toString(formatAccessibilityLabel) + \" \" + markingLabel;\n      }\n\n      return (isToday ? 'today' : '') + \" \" + day.toString('dddd d MMMM yyyy') + \" \" + markingLabel;\n    });\n    return _this;\n  }\n\n  _createClass(Day, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      return shouldUpdate(this.props, nextProps, ['day', 'dayComponent', 'state', 'markingType', 'marking', 'onPress', 'onLongPress']);\n    }\n  }, {\n    key: \"getMarkingLabel\",\n    value: function getMarkingLabel(marking) {\n      var label = '';\n\n      if (marking) {\n        if (marking.accessibilityLabel) {\n          return marking.accessibilityLabel;\n        }\n\n        if (marking.selected) {\n          label += 'selected ';\n\n          if (!marking.marked) {\n            label += 'You have no entries for this day ';\n          }\n        }\n\n        if (marking.marked) {\n          label += 'You have entries for this day ';\n        }\n\n        if (marking.startingDay) {\n          label += 'period start ';\n        }\n\n        if (marking.endingDay) {\n          label += 'period end ';\n        }\n\n        if (marking.disabled || marking.disableTouchEvent) {\n          label += 'disabled ';\n        }\n      }\n\n      return label;\n    }\n  }, {\n    key: \"getDayComponent\",\n    value: function getDayComponent() {\n      var _this$props = this.props,\n          dayComponent = _this$props.dayComponent,\n          markingType = _this$props.markingType;\n\n      if (dayComponent) {\n        return dayComponent;\n      }\n\n      return markingType === 'period' ? PeriodDay : BasicDay;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          day = _this$props2.day,\n          marking = _this$props2.marking;\n      var date = xdateToData(day);\n      var isToday = dateutils_isToday(day);\n      var Component = this.getDayComponent();\n\n      var dayProps = _.omit(this.props, 'day');\n\n      var accessibilityLabel = this.getAccessibilityLabel(day, marking, isToday);\n      return React.createElement(Component, _extends({}, dayProps, {\n        date: date,\n        testID: SELECT_DATE_SLOT + \"-\" + date.dateString,\n        accessibilityLabel: accessibilityLabel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }\n      }), date ? day == null ? void 0 : day.getDate() : day);\n    }\n  }]);\n\n  return Day;\n}(Component);\n\nDay.displayName = 'IGNORE';\nDay.propTypes = _objectSpread(_objectSpread({}, basicDayPropsTypes), {}, {\n  day: PropTypes.object,\n  dayComponent: PropTypes.any\n});\nexport { Day as default };","map":{"version":3,"sources":["/app/node_modules/react-native-calendars/src/calendar/day/index.js"],"names":["_","PropTypes","XDate","memoize","React","Component","shouldUpdate","isToday","dateutils_isToday","xdateToData","SELECT_DATE_SLOT","BasicDay","PeriodDay","basicDayPropsTypes","omit","propTypes","Day","getAccessibilityLabel","day","marking","today","get","formatAccessibilityLabel","markingLabel","getMarkingLabel","toString","nextProps","props","label","accessibilityLabel","selected","marked","startingDay","endingDay","disabled","disableTouchEvent","dayComponent","markingType","date","getDayComponent","dayProps","dateString","getDate","displayName","object","any"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport XDate from 'xdate';\nimport memoize from 'memoize-one';\nimport React, { Component } from 'react';\n// @ts-expect-error\nimport { shouldUpdate } from '../../component-updater';\n// @ts-expect-error\nimport { isToday as dateutils_isToday } from '../../dateutils';\n// @ts-expect-error\nimport { xdateToData } from '../../interface';\n// @ts-expect-error\nimport { SELECT_DATE_SLOT } from '../../testIDs';\nimport BasicDay from './basic';\nimport PeriodDay from './period';\nconst basicDayPropsTypes = _.omit(BasicDay.propTypes, 'date');\nexport default class Day extends Component {\n    static displayName = 'IGNORE';\n    static propTypes = {\n        ...basicDayPropsTypes,\n        /** The day to render */\n        day: PropTypes.object,\n        /** Provide custom day rendering component */\n        dayComponent: PropTypes.any\n    };\n    shouldComponentUpdate(nextProps) {\n        return shouldUpdate(this.props, nextProps, [\n            'day',\n            'dayComponent',\n            'state',\n            'markingType',\n            'marking',\n            'onPress',\n            'onLongPress'\n        ]);\n    }\n    getMarkingLabel(marking) {\n        let label = '';\n        if (marking) {\n            if (marking.accessibilityLabel) {\n                return marking.accessibilityLabel;\n            }\n            if (marking.selected) {\n                label += 'selected ';\n                if (!marking.marked) {\n                    label += 'You have no entries for this day ';\n                }\n            }\n            if (marking.marked) {\n                label += 'You have entries for this day ';\n            }\n            if (marking.startingDay) {\n                label += 'period start ';\n            }\n            if (marking.endingDay) {\n                label += 'period end ';\n            }\n            if (marking.disabled || marking.disableTouchEvent) {\n                label += 'disabled ';\n            }\n        }\n        return label;\n    }\n    getAccessibilityLabel = memoize((day, marking, isToday) => {\n        const today = _.get(XDate, 'locales[XDate.defaultLocale].today');\n        const formatAccessibilityLabel = _.get(XDate, 'locales[XDate.defaultLocale].formatAccessibilityLabel');\n        const markingLabel = this.getMarkingLabel(marking);\n        if (formatAccessibilityLabel) {\n            return `${isToday ? today : ''} ${day.toString(formatAccessibilityLabel)} ${markingLabel}`;\n        }\n        return `${isToday ? 'today' : ''} ${day.toString('dddd d MMMM yyyy')} ${markingLabel}`;\n    });\n    getDayComponent() {\n        const { dayComponent, markingType } = this.props;\n        if (dayComponent) {\n            return dayComponent;\n        }\n        return markingType === 'period' ? PeriodDay : BasicDay;\n    }\n    render() {\n        const { day, marking } = this.props;\n        const date = xdateToData(day);\n        const isToday = dateutils_isToday(day);\n        const Component = this.getDayComponent();\n        const dayProps = _.omit(this.props, 'day');\n        const accessibilityLabel = this.getAccessibilityLabel(day, marking, isToday);\n        return (<Component {...dayProps} date={date} testID={`${SELECT_DATE_SLOT}-${date.dateString}`} accessibilityLabel={accessibilityLabel}>\n        {date ? day?.getDate() : day}\n      </Component>);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}