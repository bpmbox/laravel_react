{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/app/node_modules/react-native-calendars/src/calendar-list/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport XDate from 'xdate';\nimport React, { Component } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { extractComponentProps } from \"../component-updater\";\nimport { xdateToData, parseDate } from \"../interface\";\nimport { page, sameDate } from \"../dateutils\";\nimport { STATIC_HEADER } from \"../testIDs\";\nimport styleConstructor from \"./style\";\nimport Calendar from \"../calendar\";\nimport CalendarListItem from \"./item\";\nimport CalendarHeader from \"../calendar/header/index\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width;\n\nvar CALENDAR_WIDTH = width;\nvar CALENDAR_HEIGHT = 360;\nvar PAST_SCROLL_RANGE = 50;\nvar FUTURE_SCROLL_RANGE = 50;\n\nvar CalendarList = function (_Component) {\n  _inherits(CalendarList, _Component);\n\n  var _super = _createSuper(CalendarList);\n\n  function CalendarList(props) {\n    var _this;\n\n    _classCallCheck(this, CalendarList);\n\n    _this = _super.call(this, props);\n    _this.list = React.createRef();\n    _this.viewabilityConfig = {\n      itemVisiblePercentThreshold: 20\n    };\n\n    _this.scrollToMonth = function (m) {\n      var _this$list, _this$list$current;\n\n      var _this$props = _this.props,\n          horizontal = _this$props.horizontal,\n          _this$props$calendarH = _this$props.calendarHeight,\n          calendarHeight = _this$props$calendarH === void 0 ? CALENDAR_HEIGHT : _this$props$calendarH,\n          _this$props$calendarW = _this$props.calendarWidth,\n          calendarWidth = _this$props$calendarW === void 0 ? CALENDAR_WIDTH : _this$props$calendarW,\n          _this$props$pastScrol = _this$props.pastScrollRange,\n          pastScrollRange = _this$props$pastScrol === void 0 ? PAST_SCROLL_RANGE : _this$props$pastScrol,\n          _this$props$animateSc = _this$props.animateScroll,\n          animateScroll = _this$props$animateSc === void 0 ? false : _this$props$animateSc;\n      var month = parseDate(m);\n      var scrollTo = month || _this.state.openDate;\n      var diffMonths = Math.round(_this.state.openDate.clone().setDate(1).diffMonths(scrollTo.clone().setDate(1)));\n      var size = horizontal ? calendarWidth : calendarHeight;\n      var scrollAmount = size * pastScrollRange + diffMonths * size;\n      (_this$list = _this.list) == null ? void 0 : (_this$list$current = _this$list.current) == null ? void 0 : _this$list$current.scrollToOffset({\n        offset: scrollAmount,\n        animated: animateScroll\n      });\n    };\n\n    _this.getItemLayout = function (_, index) {\n      var _this$props2 = _this.props,\n          horizontal = _this$props2.horizontal,\n          _this$props2$calendar = _this$props2.calendarHeight,\n          calendarHeight = _this$props2$calendar === void 0 ? CALENDAR_HEIGHT : _this$props2$calendar,\n          _this$props2$calendar2 = _this$props2.calendarWidth,\n          calendarWidth = _this$props2$calendar2 === void 0 ? CALENDAR_WIDTH : _this$props2$calendar2;\n      var size = horizontal ? calendarWidth : calendarHeight;\n      return {\n        length: size,\n        offset: size * index,\n        index: index\n      };\n    };\n\n    _this.addMonth = function (count) {\n      _this.updateMonth(_this.state.currentMonth.clone().addMonths(count, true));\n    };\n\n    _this.onViewableItemsChanged = function (_ref) {\n      var viewableItems = _ref.viewableItems;\n\n      function rowIsCloseToViewable(index, distance) {\n        for (var i = 0; i < viewableItems.length; i++) {\n          if (Math.abs(index - parseInt(viewableItems[i].index)) <= distance) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      var rowclone = _this.state.rows;\n      var newrows = [];\n      var visibleMonths = [];\n\n      for (var i = 0; i < rowclone.length; i++) {\n        var val = rowclone[i];\n        var rowShouldBeRendered = rowIsCloseToViewable(i, 1);\n        var _this$props$pastScrol2 = _this.props.pastScrollRange,\n            pastScrollRange = _this$props$pastScrol2 === void 0 ? PAST_SCROLL_RANGE : _this$props$pastScrol2;\n\n        if (rowShouldBeRendered && !rowclone[i].getTime) {\n          val = _this.state.openDate.clone().addMonths(i - pastScrollRange, true);\n        } else if (!rowShouldBeRendered) {\n          val = _this.state.texts[i];\n        }\n\n        newrows.push(val);\n\n        if (rowIsCloseToViewable(i, 0)) {\n          visibleMonths.push(xdateToData(val));\n        }\n      }\n\n      _.invoke(_this.props, 'onVisibleMonthsChange', visibleMonths);\n\n      _this.setState({\n        rows: newrows,\n        currentMonth: parseDate(visibleMonths[0])\n      });\n    };\n\n    _this.renderItem = function (_ref2) {\n      var item = _ref2.item;\n\n      var _this$props3 = _this.props,\n          calendarStyle = _this$props3.calendarStyle,\n          horizontal = _this$props3.horizontal,\n          calendarWidth = _this$props3.calendarWidth,\n          testID = _this$props3.testID,\n          others = _objectWithoutProperties(_this$props3, [\"calendarStyle\", \"horizontal\", \"calendarWidth\", \"testID\"]);\n\n      return React.createElement(CalendarListItem, _extends({}, others, {\n        item: item,\n        testID: testID + \"_\" + item,\n        style: calendarStyle,\n        horizontal: horizontal,\n        calendarWidth: horizontal ? calendarWidth : undefined,\n        scrollToMonth: _this.scrollToMonth,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 17\n        }\n      }));\n    };\n\n    _this.style = styleConstructor(props.theme);\n    var rows = [];\n    var texts = [];\n    var date = parseDate(props.current) || new XDate();\n\n    var _props$pastScrollRang = props.pastScrollRange,\n        _pastScrollRange = _props$pastScrollRang === void 0 ? PAST_SCROLL_RANGE : _props$pastScrollRang,\n        _props$futureScrollRa = props.futureScrollRange,\n        futureScrollRange = _props$futureScrollRa === void 0 ? FUTURE_SCROLL_RANGE : _props$futureScrollRa;\n\n    for (var i = 0; i <= _pastScrollRange + futureScrollRange; i++) {\n      var rangeDate = date.clone().addMonths(i - _pastScrollRange, true);\n      var rangeDateStr = rangeDate.toString('MMM yyyy');\n      texts.push(rangeDateStr);\n\n      if (_pastScrollRange - 1 <= i && i <= _pastScrollRange + 1 || !_pastScrollRange && i <= _pastScrollRange + 2) {\n        rows.push(rangeDate);\n      } else {\n        rows.push(rangeDateStr);\n      }\n    }\n\n    _this.state = {\n      rows: rows,\n      texts: texts,\n      openDate: date,\n      currentMonth: parseDate(props.current)\n    };\n    return _this;\n  }\n\n  _createClass(CalendarList, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevCurrent = parseDate(prevProps.current);\n      var current = parseDate(this.props.current);\n\n      if (current && prevCurrent && current.getTime() !== prevCurrent.getTime()) {\n        this.scrollToMonth(current);\n      }\n    }\n  }, {\n    key: \"scrollToDay\",\n    value: function scrollToDay(d, offset, animated) {\n      var _this$list2, _this$list2$current;\n\n      var _this$props4 = this.props,\n          horizontal = _this$props4.horizontal,\n          _this$props4$calendar = _this$props4.calendarHeight,\n          calendarHeight = _this$props4$calendar === void 0 ? CALENDAR_HEIGHT : _this$props4$calendar,\n          _this$props4$calendar2 = _this$props4.calendarWidth,\n          calendarWidth = _this$props4$calendar2 === void 0 ? CALENDAR_WIDTH : _this$props4$calendar2,\n          _this$props4$pastScro = _this$props4.pastScrollRange,\n          pastScrollRange = _this$props4$pastScro === void 0 ? PAST_SCROLL_RANGE : _this$props4$pastScro,\n          firstDay = _this$props4.firstDay;\n      var day = parseDate(d);\n      var diffMonths = Math.round(this.state.openDate.clone().setDate(1).diffMonths(day.clone().setDate(1)));\n      var size = horizontal ? calendarWidth : calendarHeight;\n      var scrollAmount = size * pastScrollRange + diffMonths * size + (offset || 0);\n\n      if (!horizontal) {\n        var week = 0;\n        var days = page(day, firstDay);\n\n        for (var i = 0; i < days.length; i++) {\n          week = Math.floor(i / 7);\n\n          if (sameDate(days[i], day)) {\n            scrollAmount += 46 * week;\n            break;\n          }\n        }\n      }\n\n      (_this$list2 = this.list) == null ? void 0 : (_this$list2$current = _this$list2.current) == null ? void 0 : _this$list2$current.scrollToOffset({\n        offset: scrollAmount,\n        animated: animated\n      });\n    }\n  }, {\n    key: \"getMonthIndex\",\n    value: function getMonthIndex(month) {\n      var _this$props$pastScrol3 = this.props.pastScrollRange,\n          pastScrollRange = _this$props$pastScrol3 === void 0 ? PAST_SCROLL_RANGE : _this$props$pastScrol3;\n      var diffMonths = this.state.openDate.diffMonths(month) + pastScrollRange;\n      return diffMonths;\n    }\n  }, {\n    key: \"updateMonth\",\n    value: function updateMonth(day) {\n      var _this2 = this;\n\n      var doNotTriggerListeners = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (day.toString('yyyy MM') === this.state.currentMonth.toString('yyyy MM')) {\n        return;\n      }\n\n      this.setState({\n        currentMonth: day.clone()\n      }, function () {\n        _this2.scrollToMonth(_this2.state.currentMonth);\n\n        if (!doNotTriggerListeners) {\n          var currMont = _this2.state.currentMonth.clone();\n\n          _.invoke(_this2.props, 'onMonthChange', xdateToData(currMont));\n\n          _.invoke(_this2.props, 'onVisibleMonthsChange', [xdateToData(currMont)]);\n        }\n      });\n    }\n  }, {\n    key: \"renderStaticHeader\",\n    value: function renderStaticHeader() {\n      var _this$props5 = this.props,\n          staticHeader = _this$props5.staticHeader,\n          horizontal = _this$props5.horizontal,\n          headerStyle = _this$props5.headerStyle;\n      var useStaticHeader = staticHeader && horizontal;\n      var headerProps = extractComponentProps(CalendarHeader, this.props);\n\n      if (useStaticHeader) {\n        return React.createElement(CalendarHeader, _extends({}, headerProps, {\n          testID: STATIC_HEADER,\n          style: [this.style.staticHeader, headerStyle],\n          month: this.state.currentMonth,\n          addMonth: this.addMonth,\n          accessibilityElementsHidden: true,\n          importantForAccessibility: 'no-hide-descendants',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 21\n          }\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          style = _this$props6.style,\n          pastScrollRange = _this$props6.pastScrollRange,\n          futureScrollRange = _this$props6.futureScrollRange,\n          horizontal = _this$props6.horizontal,\n          showScrollIndicator = _this$props6.showScrollIndicator;\n      return React.createElement(View, {\n        style: this.style.flatListContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 17\n        }\n      }, React.createElement(FlatList, {\n        ref: this.list,\n        style: [this.style.container, style],\n        initialListSize: pastScrollRange + futureScrollRange + 1,\n        data: this.state.rows,\n        renderItem: this.renderItem,\n        getItemLayout: this.getItemLayout,\n        onViewableItemsChanged: this.onViewableItemsChanged,\n        viewabilityConfig: this.viewabilityConfig,\n        initialScrollIndex: this.state.openDate ? this.getMonthIndex(this.state.openDate) : undefined,\n        showsVerticalScrollIndicator: showScrollIndicator,\n        showsHorizontalScrollIndicator: horizontal && showScrollIndicator,\n        testID: this.props.testID,\n        onLayout: this.props.onLayout,\n        removeClippedSubviews: this.props.removeClippedSubviews,\n        pagingEnabled: this.props.pagingEnabled,\n        scrollEnabled: this.props.scrollEnabled,\n        scrollsToTop: this.props.scrollsToTop,\n        horizontal: this.props.horizontal,\n        keyboardShouldPersistTaps: this.props.keyboardShouldPersistTaps,\n        keyExtractor: this.props.keyExtractor,\n        onEndReachedThreshold: this.props.onEndReachedThreshold,\n        onEndReached: this.props.onEndReached,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 9\n        }\n      }), this.renderStaticHeader());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_, prevState) {\n      var rowClone = prevState.rows;\n      var newRows = [];\n\n      for (var i = 0; i < rowClone.length; i++) {\n        var val = prevState.texts[i];\n\n        if (rowClone[i].getTime) {\n          val = rowClone[i].clone();\n          val.propBump = rowClone[i].propBump ? rowClone[i].propBump + 1 : 1;\n        }\n\n        newRows.push(val);\n      }\n\n      return {\n        rows: newRows\n      };\n    }\n  }]);\n\n  return CalendarList;\n}(Component);\n\nCalendarList.displayName = 'CalendarList';\nCalendarList.propTypes = _objectSpread(_objectSpread({}, Calendar.propTypes), {}, {\n  pastScrollRange: PropTypes.number,\n  futureScrollRange: PropTypes.number,\n  calendarWidth: PropTypes.number,\n  calendarHeight: PropTypes.number,\n  calendarStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n  staticHeader: PropTypes.bool,\n  showScrollIndicator: PropTypes.bool,\n  animateScroll: PropTypes.bool,\n  scrollEnabled: PropTypes.bool,\n  scrollsToTop: PropTypes.bool,\n  pagingEnabled: PropTypes.bool,\n  horizontal: PropTypes.bool,\n  keyboardShouldPersistTaps: PropTypes.oneOf(['never', 'always', 'handled']),\n  keyExtractor: PropTypes.func,\n  onEndReachedThreshold: PropTypes.number,\n  onEndReached: PropTypes.func\n});\nCalendarList.defaultProps = {\n  calendarWidth: CALENDAR_WIDTH,\n  calendarHeight: CALENDAR_HEIGHT,\n  pastScrollRange: PAST_SCROLL_RANGE,\n  futureScrollRange: FUTURE_SCROLL_RANGE,\n  showScrollIndicator: false,\n  horizontal: false,\n  scrollsToTop: false,\n  scrollEnabled: true,\n  removeClippedSubviews: Platform.OS === 'android',\n  keyExtractor: function keyExtractor(_, index) {\n    return String(index);\n  }\n};\nexport default CalendarList;","map":{"version":3,"sources":["/app/node_modules/react-native-calendars/src/calendar-list/index.js"],"names":["_","PropTypes","XDate","React","Component","extractComponentProps","xdateToData","parseDate","page","sameDate","STATIC_HEADER","styleConstructor","Calendar","CalendarListItem","CalendarHeader","Dimensions","get","width","CALENDAR_WIDTH","CALENDAR_HEIGHT","PAST_SCROLL_RANGE","FUTURE_SCROLL_RANGE","CalendarList","props","list","createRef","viewabilityConfig","itemVisiblePercentThreshold","scrollToMonth","m","horizontal","calendarHeight","calendarWidth","pastScrollRange","animateScroll","month","scrollTo","state","openDate","diffMonths","Math","round","clone","setDate","size","scrollAmount","current","scrollToOffset","offset","animated","getItemLayout","index","length","addMonth","count","updateMonth","currentMonth","addMonths","onViewableItemsChanged","viewableItems","rowIsCloseToViewable","distance","i","abs","parseInt","rowclone","rows","newrows","visibleMonths","val","rowShouldBeRendered","getTime","texts","push","invoke","setState","renderItem","item","calendarStyle","testID","others","undefined","style","theme","date","futureScrollRange","rangeDate","rangeDateStr","toString","prevProps","prevCurrent","d","firstDay","day","week","days","floor","doNotTriggerListeners","currMont","staticHeader","headerStyle","useStaticHeader","headerProps","showScrollIndicator","flatListContainer","container","getMonthIndex","onLayout","removeClippedSubviews","pagingEnabled","scrollEnabled","scrollsToTop","keyboardShouldPersistTaps","keyExtractor","onEndReachedThreshold","onEndReached","renderStaticHeader","prevState","rowClone","newRows","propBump","displayName","propTypes","number","oneOfType","object","array","bool","oneOf","func","defaultProps","Platform","OS","String"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport XDate from 'xdate';\nimport React, { Component } from 'react';\nimport { FlatList, Platform, Dimensions, View } from 'react-native';\n// @ts-expect-error\nimport { extractComponentProps } from '../component-updater';\n// @ts-expect-error\nimport { xdateToData, parseDate } from '../interface';\n// @ts-expect-error\nimport { page, sameDate } from '../dateutils';\n// @ts-expect-error\nimport { STATIC_HEADER } from '../testIDs';\nimport styleConstructor from './style';\nimport Calendar from '../calendar';\nimport CalendarListItem from './item';\nimport CalendarHeader from '../calendar/header/index';\nconst { width } = Dimensions.get('window');\nconst CALENDAR_WIDTH = width;\nconst CALENDAR_HEIGHT = 360;\nconst PAST_SCROLL_RANGE = 50;\nconst FUTURE_SCROLL_RANGE = 50;\n/**\n * @description: Calendar List component for both vertical and horizontal calendars\n * @extends: Calendar\n * @extendslink: docs/Calendar\n * @example: https://github.com/wix/react-native-calendars/blob/master/example/src/screens/calendarsList.js\n * @gif: https://github.com/wix/react-native-calendars/blob/master/demo/calendar-list.gif\n */\nclass CalendarList extends Component {\n    static displayName = 'CalendarList';\n    static propTypes = {\n        ...Calendar.propTypes,\n        /** Max amount of months allowed to scroll to the past. Default = 50 */\n        pastScrollRange: PropTypes.number,\n        /** Max amount of months allowed to scroll to the future. Default = 50 */\n        futureScrollRange: PropTypes.number,\n        /** Used when calendar scroll is horizontal, default is device width, pagination should be disabled */\n        calendarWidth: PropTypes.number,\n        /** Dynamic calendar height */\n        calendarHeight: PropTypes.number,\n        /** Style for the List item (the calendar) */\n        calendarStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n        /** Whether to use static header that will not scroll with the list (horizontal only) */\n        staticHeader: PropTypes.bool,\n        /** Enable or disable vertical / horizontal scroll indicator. Default = false */\n        showScrollIndicator: PropTypes.bool,\n        /** Whether to animate the auto month scroll */\n        animateScroll: PropTypes.bool,\n        /** Enable or disable scrolling of calendar list */\n        scrollEnabled: PropTypes.bool,\n        /** When true, the calendar list scrolls to top when the status bar is tapped. Default = true */\n        scrollsToTop: PropTypes.bool,\n        /** Enable or disable paging on scroll */\n        pagingEnabled: PropTypes.bool,\n        /** Whether the scroll is horizontal */\n        horizontal: PropTypes.bool,\n        /** Should Keyboard persist taps */\n        keyboardShouldPersistTaps: PropTypes.oneOf(['never', 'always', 'handled']),\n        /** A custom key extractor for the generated calendar months */\n        keyExtractor: PropTypes.func,\n        /** How far from the end to trigger the onEndReached callback */\n        onEndReachedThreshold: PropTypes.number,\n        /** Called once when the scroll position gets within onEndReachedThreshold */\n        onEndReached: PropTypes.func\n    };\n    static defaultProps = {\n        calendarWidth: CALENDAR_WIDTH,\n        calendarHeight: CALENDAR_HEIGHT,\n        pastScrollRange: PAST_SCROLL_RANGE,\n        futureScrollRange: FUTURE_SCROLL_RANGE,\n        showScrollIndicator: false,\n        horizontal: false,\n        scrollsToTop: false,\n        scrollEnabled: true,\n        removeClippedSubviews: Platform.OS === 'android',\n        keyExtractor: (_, index) => String(index)\n    };\n    style;\n    list = React.createRef();\n    viewabilityConfig = {\n        itemVisiblePercentThreshold: 20\n    };\n    constructor(props) {\n        super(props);\n        this.style = styleConstructor(props.theme);\n        const rows = [];\n        const texts = [];\n        const date = parseDate(props.current) || new XDate();\n        const { pastScrollRange = PAST_SCROLL_RANGE, futureScrollRange = FUTURE_SCROLL_RANGE } = props;\n        for (let i = 0; i <= pastScrollRange + futureScrollRange; i++) {\n            const rangeDate = date.clone().addMonths(i - pastScrollRange, true);\n            const rangeDateStr = rangeDate.toString('MMM yyyy');\n            texts.push(rangeDateStr);\n            /*\n             * This selects range around current shown month [-0, +2] or [-1, +1] month for detail calendar rendering.\n             * If `this.pastScrollRange` is `undefined` it's equal to `false` or 0 in next condition.\n             */\n            if ((pastScrollRange - 1 <= i && i <= pastScrollRange + 1) ||\n                (!pastScrollRange && i <= pastScrollRange + 2)) {\n                rows.push(rangeDate);\n            }\n            else {\n                rows.push(rangeDateStr);\n            }\n        }\n        this.state = {\n            rows,\n            texts,\n            openDate: date,\n            currentMonth: parseDate(props.current)\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const prevCurrent = parseDate(prevProps.current);\n        const current = parseDate(this.props.current);\n        if (current && prevCurrent && current.getTime() !== prevCurrent.getTime()) {\n            this.scrollToMonth(current);\n        }\n    }\n    static getDerivedStateFromProps(_, prevState) {\n        const rowClone = prevState.rows;\n        const newRows = [];\n        for (let i = 0; i < rowClone.length; i++) {\n            let val = prevState.texts[i];\n            // @ts-ignore\n            if (rowClone[i].getTime) {\n                val = rowClone[i].clone();\n                // @ts-ignore\n                val.propBump = rowClone[i].propBump ? rowClone[i].propBump + 1 : 1;\n            }\n            newRows.push(val);\n        }\n        return { rows: newRows };\n    }\n    scrollToDay(d, offset, animated) {\n        const { horizontal, calendarHeight = CALENDAR_HEIGHT, calendarWidth = CALENDAR_WIDTH, pastScrollRange = PAST_SCROLL_RANGE, firstDay } = this.props;\n        const day = parseDate(d);\n        const diffMonths = Math.round(this.state.openDate.clone().setDate(1).diffMonths(day.clone().setDate(1)));\n        const size = horizontal ? calendarWidth : calendarHeight;\n        let scrollAmount = size * pastScrollRange + diffMonths * size + (offset || 0);\n        if (!horizontal) {\n            let week = 0;\n            const days = page(day, firstDay);\n            for (let i = 0; i < days.length; i++) {\n                week = Math.floor(i / 7);\n                if (sameDate(days[i], day)) {\n                    scrollAmount += 46 * week;\n                    break;\n                }\n            }\n        }\n        this.list?.current?.scrollToOffset({ offset: scrollAmount, animated });\n    }\n    scrollToMonth = (m) => {\n        const { horizontal, calendarHeight = CALENDAR_HEIGHT, calendarWidth = CALENDAR_WIDTH, pastScrollRange = PAST_SCROLL_RANGE, animateScroll = false } = this.props;\n        const month = parseDate(m);\n        const scrollTo = month || this.state.openDate;\n        let diffMonths = Math.round(this.state.openDate.clone().setDate(1).diffMonths(scrollTo.clone().setDate(1)));\n        const size = horizontal ? calendarWidth : calendarHeight;\n        const scrollAmount = size * pastScrollRange + diffMonths * size;\n        this.list?.current?.scrollToOffset({ offset: scrollAmount, animated: animateScroll });\n    };\n    getItemLayout = (_, index) => {\n        const { horizontal, calendarHeight = CALENDAR_HEIGHT, calendarWidth = CALENDAR_WIDTH } = this.props;\n        const size = horizontal ? calendarWidth : calendarHeight;\n        return {\n            length: size,\n            offset: size * index,\n            index\n        };\n    };\n    getMonthIndex(month) {\n        const { pastScrollRange = PAST_SCROLL_RANGE } = this.props;\n        let diffMonths = this.state.openDate.diffMonths(month) + pastScrollRange;\n        return diffMonths;\n    }\n    addMonth = (count) => {\n        this.updateMonth(this.state.currentMonth.clone().addMonths(count, true));\n    };\n    updateMonth(day, doNotTriggerListeners = false) {\n        if (day.toString('yyyy MM') === this.state.currentMonth.toString('yyyy MM')) {\n            return;\n        }\n        this.setState({ currentMonth: day.clone() }, () => {\n            this.scrollToMonth(this.state.currentMonth);\n            if (!doNotTriggerListeners) {\n                const currMont = this.state.currentMonth.clone();\n                _.invoke(this.props, 'onMonthChange', xdateToData(currMont));\n                _.invoke(this.props, 'onVisibleMonthsChange', [xdateToData(currMont)]);\n            }\n        });\n    }\n    onViewableItemsChanged = ({ viewableItems }) => {\n        function rowIsCloseToViewable(index, distance) {\n            for (let i = 0; i < viewableItems.length; i++) {\n                if (Math.abs(index - parseInt(viewableItems[i].index)) <= distance) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        const rowclone = this.state.rows;\n        const newrows = [];\n        const visibleMonths = [];\n        for (let i = 0; i < rowclone.length; i++) {\n            let val = rowclone[i];\n            const rowShouldBeRendered = rowIsCloseToViewable(i, 1);\n            const { pastScrollRange = PAST_SCROLL_RANGE } = this.props;\n            if (rowShouldBeRendered && !rowclone[i].getTime) {\n                val = this.state.openDate.clone().addMonths(i - pastScrollRange, true);\n            }\n            else if (!rowShouldBeRendered) {\n                val = this.state.texts[i];\n            }\n            newrows.push(val);\n            if (rowIsCloseToViewable(i, 0)) {\n                visibleMonths.push(xdateToData(val));\n            }\n        }\n        _.invoke(this.props, 'onVisibleMonthsChange', visibleMonths);\n        this.setState({\n            // @ts-ignore\n            rows: newrows,\n            currentMonth: parseDate(visibleMonths[0])\n        });\n    };\n    renderItem = ({ item }) => {\n        const { calendarStyle, horizontal, calendarWidth, testID, ...others } = this.props;\n        return (<CalendarListItem {...others} item={item} testID={`${testID}_${item}`} style={calendarStyle} horizontal={horizontal} calendarWidth={horizontal ? calendarWidth : undefined} scrollToMonth={this.scrollToMonth}/>);\n    };\n    renderStaticHeader() {\n        const { staticHeader, horizontal, headerStyle } = this.props;\n        const useStaticHeader = staticHeader && horizontal;\n        const headerProps = extractComponentProps(CalendarHeader, this.props);\n        if (useStaticHeader) {\n            return (<CalendarHeader {...headerProps} testID={STATIC_HEADER} style={[this.style.staticHeader, headerStyle]} month={this.state.currentMonth} addMonth={this.addMonth} accessibilityElementsHidden={true} // iOS\n             importantForAccessibility={'no-hide-descendants'} // Android\n            />);\n        }\n    }\n    render() {\n        const { style, pastScrollRange, futureScrollRange, horizontal, showScrollIndicator } = this.props;\n        return (<View style={this.style.flatListContainer}>\n        <FlatList ref={this.list} style={[this.style.container, style]} \n        // @ts-ignore\n        initialListSize={pastScrollRange + futureScrollRange + 1} // ListView deprecated\n         data={this.state.rows} renderItem={this.renderItem} getItemLayout={this.getItemLayout} onViewableItemsChanged={this.onViewableItemsChanged} viewabilityConfig={this.viewabilityConfig} initialScrollIndex={this.state.openDate ? this.getMonthIndex(this.state.openDate) : undefined} showsVerticalScrollIndicator={showScrollIndicator} showsHorizontalScrollIndicator={horizontal && showScrollIndicator} testID={this.props.testID} onLayout={this.props.onLayout} removeClippedSubviews={this.props.removeClippedSubviews} pagingEnabled={this.props.pagingEnabled} scrollEnabled={this.props.scrollEnabled} scrollsToTop={this.props.scrollsToTop} horizontal={this.props.horizontal} keyboardShouldPersistTaps={this.props.keyboardShouldPersistTaps} keyExtractor={this.props.keyExtractor} onEndReachedThreshold={this.props.onEndReachedThreshold} onEndReached={this.props.onEndReached}/>\n        {this.renderStaticHeader()}\n      </View>);\n    }\n}\nexport default CalendarList;\n"]},"metadata":{},"sourceType":"module"}